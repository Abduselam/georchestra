Index: src/main/src/test/java/org/geoserver/security/impl/SecureCatalogImplTest.java
===================================================================
--- src/main/src/test/java/org/geoserver/security/impl/SecureCatalogImplTest.java	(revision 16706)
+++ src/main/src/test/java/org/geoserver/security/impl/SecureCatalogImplTest.java	(working copy)
@@ -217,8 +217,29 @@
         assertEquals(0, sc.getFeatureTypes().size());
         assertEquals(0, sc.getCoverages().size());
         assertEquals(0, sc.getWorkspaces().size());
+     
+        // try with a describeFeatureType, make sure the lists are empty
+        request = org.easymock.classextension.EasyMock.createNiceMock(Request.class);
+        org.easymock.classextension.EasyMock.expect(request.getRequest()).andReturn("DescribeFeatureType").anyTimes();
+        org.easymock.classextension.EasyMock.replay(request);
+        Dispatcher.REQUEST.set(request);
         
+        // check the lists used to build capabilities are empty
+        assertEquals(0, sc.getFeatureTypes().size());
+//        assertEquals(0, sc.getCoverages().size());
+//        assertEquals(0, sc.getWorkspaces().size());    
         
+        // try with a describeFeatureType, make sure the lists are empty
+        request = org.easymock.classextension.EasyMock.createNiceMock(Request.class);
+        org.easymock.classextension.EasyMock.expect(request.getRequest()).andReturn("GetFeature").anyTimes();
+        org.easymock.classextension.EasyMock.replay(request);
+        Dispatcher.REQUEST.set(request);
+        
+        // check the lists used to build capabilities are empty
+        assertEquals(0, sc.getFeatureTypes().size());
+//        assertEquals(0, sc.getCoverages().size());
+//        assertEquals(0, sc.getWorkspaces().size()); 
+        
 
         // try with write enabled user
         SecurityContextHolder.getContext().setAuthentication(rwUser);
Index: src/main/src/main/java/org/geoserver/security/SecureCatalogImpl.java
===================================================================
--- src/main/src/main/java/org/geoserver/security/SecureCatalogImpl.java	(revision 16706)
+++ src/main/src/main/java/org/geoserver/security/SecureCatalogImpl.java	(working copy)
@@ -233,7 +233,7 @@
     }
 
     public List<FeatureTypeInfo> getFeatureTypes() {
-        return filterResources(user(), delegate.getFeatureTypes());
+        return filterResources(user(), delegate.getFeatureTypes(), false);
     }
 
     public List<FeatureTypeInfo> getFeatureTypesByNamespace(NamespaceInfo namespace) {
@@ -305,7 +305,7 @@
     }
 
     public List<NamespaceInfo> getNamespaces() {
-        return filterNamespaces(user(), delegate.getNamespaces());
+        return filterNamespaces(user(), delegate.getNamespaces(), false);
     }
 
     public <T extends ResourceInfo> T getResource(String id, Class<T> clazz) {
@@ -665,6 +665,7 @@
             return new AccessDeniedException("Operation unallowed with the current privileges");
     }
 
+    
     /**
      * Given a list of resources, returns a copy of it containing only the
      * resources the user can access
@@ -676,9 +677,32 @@
      */
     protected <T extends ResourceInfo> List<T> filterResources(Authentication user,
             List<T> resources) {
+    	return filterResources(user, resources, true);
+    }
+    /**
+     * Given a list of resources, returns a copy of it containing only the
+     * resources the user can access
+     * 
+     * @param user
+     * @param resources
+     * @param handleCheckAccessException
+     * 
+     * @return
+     */
+    protected <T extends ResourceInfo> List<T> filterResources(Authentication user,
+            List<T> resources, boolean handleCheckAccessException) {
         List<T> result = new ArrayList<T>();
         for (T original : resources) {
-            T secured = checkAccess(user, original);
+            T secured = null;
+            try {
+            	secured = checkAccess(user, original);
+            }
+            catch (SpringSecurityException e) {
+            	if (handleCheckAccessException) {
+            		throw e;
+            	}
+            	secured = null;
+            }
             if (secured != null)
                 result.add(secured);
         }
@@ -695,9 +719,32 @@
      * @return
      */
     protected <T extends StoreInfo> List<T> filterStores(Authentication user, List<T> resources) {
+    	return filterStores(user, resources, true);
+    }
+    /**
+     * Given a list of stores, returns a copy of it containing only the
+     * resources the user can access
+     * 
+     * @param user
+     * @param resources
+     * @param handleCheckAccessException
+     * 
+     * @return
+     */
+    protected <T extends StoreInfo> List<T> filterStores(Authentication user, List<T> resources,
+    		boolean handleCheckAccessException) {
         List<T> result = new ArrayList<T>();
         for (T original : resources) {
-            T secured = checkAccess(user, original);
+            T secured = null;
+            try {
+            	secured = checkAccess(user, original);
+            }
+            catch (SpringSecurityException e) {
+            	if (handleCheckAccessException) {
+            		throw e;
+            	}
+            	secured = null;
+            }
             if (secured != null)
                 result.add(secured);
         }
@@ -714,9 +761,33 @@
      * @return
      */
     protected List<LayerGroupInfo> filterGroups(Authentication user, List<LayerGroupInfo> groups) {
+    	return filterGroups(user, groups, true);
+    }
+    
+    /**
+     * Given a list of layer groups, returns a copy of it containing only the
+     * groups the user can access
+     * 
+     * @param user
+     * @param groups
+     * @param handleCheckAccessException
+     * 
+     * @return
+     */
+    protected List<LayerGroupInfo> filterGroups(Authentication user, List<LayerGroupInfo> groups,
+    		boolean handleCheckAccessException) {
         List<LayerGroupInfo> result = new ArrayList<LayerGroupInfo>();
         for (LayerGroupInfo original : groups) {
-            LayerGroupInfo secured = checkAccess(user, original);
+            LayerGroupInfo secured = null;
+            try {
+            	secured = checkAccess(user, original);
+            }
+            catch (SpringSecurityException e) {
+            	if (handleCheckAccessException) {
+            		throw e;
+            	}
+            	secured = null;
+            }
             if (secured != null)
                 result.add(secured);
         }
@@ -733,9 +804,32 @@
      * @return
      */
     protected List<LayerInfo> filterLayers(Authentication user, List<LayerInfo> layers) {
+    	return filterLayers(user, layers, true);
+    }
+    
+    /**
+     * Given a list of layers, returns a copy of it containing only the layers
+     * the user can access
+     * 
+     * @param user
+     * @param layers
+     * 
+     * @return
+     */
+    protected List<LayerInfo> filterLayers(Authentication user, List<LayerInfo> layers,
+    		boolean handleCheckAccessException) {
         List<LayerInfo> result = new ArrayList<LayerInfo>();
         for (LayerInfo original : layers) {
-            LayerInfo secured = checkAccess(user, original);
+            LayerInfo secured = null;
+            try {
+            	secured = checkAccess(user, original);
+            }
+            catch (SpringSecurityException e) {
+            	if (handleCheckAccessException) {
+            		throw e;
+            	}
+            	secured = null;
+            }
             if (secured != null)
                 result.add(secured);
         }
@@ -753,9 +847,32 @@
      */
     protected <T extends NamespaceInfo> List<T> filterNamespaces(Authentication user,
             List<T> namespaces) {
+    	return filterNamespaces(user, namespaces, true);
+    }
+    /**
+     * Given a list of namespaces, returns a copy of it containing only the
+     * namespaces the user can access
+     * 
+     * @param user
+     * @param namespaces
+     * @param handleCheckAccessException
+     * 
+     * @return
+     */
+    protected <T extends NamespaceInfo> List<T> filterNamespaces(Authentication user,
+            List<T> namespaces, boolean handleCheckAccessException) {
         List<T> result = new ArrayList<T>();
         for (T original : namespaces) {
-            T secured = checkAccess(user, original);
+            T secured = null;
+            try {
+            	secured = checkAccess(user, original);
+            }
+            catch (SpringSecurityException e) {
+            	if (handleCheckAccessException) {
+            		throw e;
+            	}
+            	secured = null;
+            }
             if (secured != null)
                 result.add(secured);
         }
@@ -773,9 +890,33 @@
      */
     protected <T extends WorkspaceInfo> List<T> filterWorkspaces(Authentication user,
             List<T> workspaces) {
+    	return filterWorkspaces(user, workspaces, true);
+    }
+    
+    /**
+     * Given a list of workspaces, returns a copy of it containing only the
+     * workspaces the user can access
+     * 
+     * @param user
+     * @param namespaces
+     * @param handleCheckAccessException
+     * 
+     * @return
+     */
+    protected <T extends WorkspaceInfo> List<T> filterWorkspaces(Authentication user,
+            List<T> workspaces, boolean handleCheckAccessException) {
         List<T> result = new ArrayList<T>();
         for (T original : workspaces) {
-            T secured = checkAccess(user, original);
+            T secured = null;
+            try {
+            	secured = checkAccess(user, original);
+            }
+            catch (SpringSecurityException e) {
+            	if (handleCheckAccessException) {
+            		throw e;
+            	}
+            	secured = null;
+            }
             if (secured != null)
                 result.add(secured);
         }
