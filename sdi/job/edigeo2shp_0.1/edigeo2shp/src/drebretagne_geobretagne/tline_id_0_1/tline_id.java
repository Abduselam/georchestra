// ============================================================================
//
// Copyright (c) 2005-2009, Talend Inc.
//
// This source code has been automatically generated by Spatial Data Integrator Powered by Talend
// / JobDesigner (CodeGenerator version 2.2.0.200910202312).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package drebretagne_geobretagne.tline_id_0_1;

import routines.DataOperation;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.OpenStreetMap;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
import org.talend.sdi.geometry.Geometry;

/**
 * Job: tline_id Purpose: <br>
 * Description: <br>
 * 
 * @author yjacolin@free.fr
 * @version 2.2.0.200910202312
 * @status
 */
public class tline_id {

	public final Object obj = new Object();
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	private class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (edigeoDir != null) {

				this.setProperty("edigeoDir", edigeoDir.toString());

			}

			if (exportDir != null) {

				this.setProperty("exportDir", exportDir.toString());

			}

			if (fileName != null) {

				this.setProperty("fileName", fileName.toString());

			}

		}

		public String edigeoDir;
		public String exportDir;
		public String fileName;
	}

	private ContextProperties context = new ContextProperties();
	private final String jobVersion = "0.1";
	private final String jobName = "tline_id";
	private final String projectName = "DREBRETAGNE_GEOBRETAGNE";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		errorMessagePS.flush();
		return baos.toString();
	}

	private class TalendException extends Exception {
		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(tline_id.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());
		sEdigeoInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tWarn_1", System.currentTimeMillis());
		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void sEdigeoInput_1_PG_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("sEdigeoInput_1_PG", System.currentTimeMillis());
		sEdigeoInput_1_PG_onSubJobError(exception, errorComponent, globalMap);
	}

	public void sEdigeoInput_1_DI_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("sEdigeoInput_1_DI", System.currentTimeMillis());
		sEdigeoInput_1_PG_onSubJobError(exception, errorComponent, globalMap);
	}

	public void sShapefileOutput_1_FI_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("sShapefileOutput_1_FI", System.currentTimeMillis());
		sEdigeoInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void sShapefileOutput_1_SO_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("sShapefileOutput_1_SO", System.currentTimeMillis());
		sEdigeoInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void sEdigeoInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tWarn_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void sEdigeoInput_1_PG_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());
				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */
				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread
						.currentThread().getId()
						+ "", "WARN", "", "Le fichier " + context.fileName
						+ " pr√©sente des erreurs pour l'objet TLINE_id", "");

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */
				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public static class row_sShapefileOutput_1_FIStruct implements
			routines.system.IPersistableRow<row_sShapefileOutput_1_FIStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String TEX_id;

		public String getTEX_id() {
			return this.TEX_id;
		}

		public String SYM_id;

		public String getSYM_id() {
			return this.SYM_id;
		}

		public Geometry the_geom;

		public Geometry getThe_geom() {
			return this.the_geom;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					length = dis.readInt();
					if (length == -1) {
						this.TEX_id = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.TEX_id = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.SYM_id = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.SYM_id = new String(commonByteArray, 0, length);
					}

					this.the_geom = (Geometry) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				if (this.TEX_id == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.TEX_id.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.SYM_id == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.SYM_id.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// Geometry

				dos.writeObject(this.the_geom);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");

			sb.append("TEX_id");
			sb.append("=");
			sb.append(String.valueOf(this.TEX_id));

			sb.append(", ");

			sb.append("SYM_id");
			sb.append("=");
			sb.append(String.valueOf(this.SYM_id));

			sb.append(", ");

			sb.append("the_geom");
			sb.append("=");
			sb.append(String.valueOf(this.the_geom));

			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_sShapefileOutput_1_FIStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfexportStruct implements
			routines.system.IPersistableRow<copyOfexportStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String TEX_id;

		public String getTEX_id() {
			return this.TEX_id;
		}

		public String SYM_id;

		public String getSYM_id() {
			return this.SYM_id;
		}

		public Geometry the_geom;

		public Geometry getThe_geom() {
			return this.the_geom;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					length = dis.readInt();
					if (length == -1) {
						this.TEX_id = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.TEX_id = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.SYM_id = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.SYM_id = new String(commonByteArray, 0, length);
					}

					this.the_geom = (Geometry) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				if (this.TEX_id == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.TEX_id.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.SYM_id == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.SYM_id.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// Geometry

				dos.writeObject(this.the_geom);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");

			sb.append("TEX_id");
			sb.append("=");
			sb.append(String.valueOf(this.TEX_id));

			sb.append(", ");

			sb.append("SYM_id");
			sb.append("=");
			sb.append(String.valueOf(this.SYM_id));

			sb.append(", ");

			sb.append("the_geom");
			sb.append("=");
			sb.append(String.valueOf(this.the_geom));

			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfexportStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String TEX_id;

		public String getTEX_id() {
			return this.TEX_id;
		}

		public String SYM_id;

		public String getSYM_id() {
			return this.SYM_id;
		}

		public Geometry the_geom;

		public Geometry getThe_geom() {
			return this.the_geom;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					length = dis.readInt();
					if (length == -1) {
						this.TEX_id = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.TEX_id = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.SYM_id = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.SYM_id = new String(commonByteArray, 0, length);
					}

					this.the_geom = (Geometry) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				if (this.TEX_id == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.TEX_id.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.SYM_id == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.SYM_id.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// Geometry

				dos.writeObject(this.the_geom);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");

			sb.append("TEX_id");
			sb.append("=");
			sb.append(String.valueOf(this.TEX_id));

			sb.append(", ");

			sb.append("SYM_id");
			sb.append("=");
			sb.append(String.valueOf(this.SYM_id));

			sb.append(", ");

			sb.append("the_geom");
			sb.append("=");
			sb.append(String.valueOf(this.the_geom));

			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_sEdigeoInput_1_PGStruct implements
			routines.system.IPersistableRow<row_sEdigeoInput_1_PGStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String TEX_id;

		public String getTEX_id() {
			return this.TEX_id;
		}

		public String SYM_id;

		public String getSYM_id() {
			return this.SYM_id;
		}

		public Geometry the_geom;

		public Geometry getThe_geom() {
			return this.the_geom;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					length = dis.readInt();
					if (length == -1) {
						this.TEX_id = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.TEX_id = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.SYM_id = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.SYM_id = new String(commonByteArray, 0, length);
					}

					this.the_geom = (Geometry) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				if (this.TEX_id == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.TEX_id.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.SYM_id == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.SYM_id.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// Geometry

				dos.writeObject(this.the_geom);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");

			sb.append("TEX_id");
			sb.append("=");
			sb.append(String.valueOf(this.TEX_id));

			sb.append(", ");

			sb.append("SYM_id");
			sb.append("=");
			sb.append(String.valueOf(this.SYM_id));

			sb.append(", ");

			sb.append("the_geom");
			sb.append("=");
			sb.append(String.valueOf(this.the_geom));

			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_sEdigeoInput_1_PGStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void sEdigeoInput_1_PGProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("sEdigeoInput_1_PG_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				row_sEdigeoInput_1_PGStruct row_sEdigeoInput_1_PG = new row_sEdigeoInput_1_PGStruct();
				row2Struct row2 = new row2Struct();
				copyOfexportStruct copyOfexport = new copyOfexportStruct();
				row_sShapefileOutput_1_FIStruct row_sShapefileOutput_1_FI = new row_sShapefileOutput_1_FIStruct();

				/**
				 * [sShapefileOutput_1_SO begin ] start
				 */

				ok_Hash.put("sShapefileOutput_1_SO", false);
				start_Hash.put("sShapefileOutput_1_SO", System
						.currentTimeMillis());
				currentComponent = "sShapefileOutput_1_SO";

				int tos_count_sShapefileOutput_1_SO = 0;

				/* initialize feature count */
				int nbFeature_sShapefileOutput_1_SO = 0;

				org.opengis.referencing.crs.CoordinateReferenceSystem targetCRS_sShapefileOutput_1_SO = null;
				try {
					targetCRS_sShapefileOutput_1_SO = org.geotools.referencing.CRS
							.decode("EPSG:27572");
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}

				/* create shapefile data store */
				java.io.File shapefile_sShapefileOutput_1_SO = new java.io.File(
						context.exportDir + "/" + context.fileName
								+ "_tline.shp");
				org.geotools.data.DataStore store_sShapefileOutput_1_SO = new org.geotools.data.shapefile.ShapefileDataStore(
						shapefile_sShapefileOutput_1_SO.toURL());

				String schemaName_sShapefileOutput_1_SO = "aa";

				/* create a map of columns for later use */
				java.util.Map<String, Integer> map_sShapefileOutput_1_SO = new java.util.HashMap<String, Integer>();

				/* create schema */
				org.geotools.feature.simple.SimpleFeatureTypeBuilder ftBuilder_sShapefileOutput_1_SO = new org.geotools.feature.simple.SimpleFeatureTypeBuilder();
				ftBuilder_sShapefileOutput_1_SO
						.setName(schemaName_sShapefileOutput_1_SO);

				/* Initialize Attribute Type Builder */
				org.geotools.feature.AttributeTypeBuilder geoAttBuilder_sShapefileOutput_1_SO = null;
				org.geotools.feature.AttributeTypeBuilder attBuilder_sShapefileOutput_1_SO = null;

				geoAttBuilder_sShapefileOutput_1_SO = new org.geotools.feature.AttributeTypeBuilder();
				geoAttBuilder_sShapefileOutput_1_SO
						.setBinding(com.vividsolutions.jts.geom.LineString.class);
				geoAttBuilder_sShapefileOutput_1_SO.setNillable(true);
				geoAttBuilder_sShapefileOutput_1_SO
						.setCRS(targetCRS_sShapefileOutput_1_SO);
				geoAttBuilder_sShapefileOutput_1_SO.setName("the_geom");
				ftBuilder_sShapefileOutput_1_SO
						.add(geoAttBuilder_sShapefileOutput_1_SO
								.buildDescriptor("the_geom",
										geoAttBuilder_sShapefileOutput_1_SO
												.buildGeometryType()));
				map_sShapefileOutput_1_SO.put("the_geom", 0);
				attBuilder_sShapefileOutput_1_SO = new org.geotools.feature.AttributeTypeBuilder();
				attBuilder_sShapefileOutput_1_SO.setName("TEX_id");
				attBuilder_sShapefileOutput_1_SO.setBinding(String.class);
				attBuilder_sShapefileOutput_1_SO.setNillable(true);

				ftBuilder_sShapefileOutput_1_SO
						.add(attBuilder_sShapefileOutput_1_SO.buildDescriptor(
								"TEX_id", attBuilder_sShapefileOutput_1_SO
										.buildType()));

				map_sShapefileOutput_1_SO.put("TEX_id", 1);
				attBuilder_sShapefileOutput_1_SO = new org.geotools.feature.AttributeTypeBuilder();
				attBuilder_sShapefileOutput_1_SO.setName("SYM_id");
				attBuilder_sShapefileOutput_1_SO.setBinding(String.class);
				attBuilder_sShapefileOutput_1_SO.setNillable(true);

				ftBuilder_sShapefileOutput_1_SO
						.add(attBuilder_sShapefileOutput_1_SO.buildDescriptor(
								"SYM_id", attBuilder_sShapefileOutput_1_SO
										.buildType()));

				map_sShapefileOutput_1_SO.put("SYM_id", 2);

				org.opengis.feature.simple.SimpleFeatureType featureType_sShapefileOutput_1_SO = ftBuilder_sShapefileOutput_1_SO
						.buildFeatureType();
				String typeName_sShapefileOutput_1_SO = featureType_sShapefileOutput_1_SO
						.getTypeName();
				store_sShapefileOutput_1_SO
						.createSchema(featureType_sShapefileOutput_1_SO);
				org.geotools.data.FeatureWriter<org.opengis.feature.simple.SimpleFeatureType, org.opengis.feature.simple.SimpleFeature> writer_sShapefileOutput_1_SO = store_sShapefileOutput_1_SO
						.getFeatureWriter(typeName_sShapefileOutput_1_SO,
								org.geotools.data.Transaction.AUTO_COMMIT);
				((org.geotools.data.shapefile.ShapefileDataStore) store_sShapefileOutput_1_SO)
						.forceSchemaCRS(targetCRS_sShapefileOutput_1_SO);

				/**
				 * [sShapefileOutput_1_SO begin ] stop
				 */

				/**
				 * [sShapefileOutput_1_FI begin ] start
				 */

				ok_Hash.put("sShapefileOutput_1_FI", false);
				start_Hash.put("sShapefileOutput_1_FI", System
						.currentTimeMillis());
				currentComponent = "sShapefileOutput_1_FI";

				int tos_count_sShapefileOutput_1_FI = 0;

				int nbFeature_sShapefileOutput_1_FI = 0;

				/**
				 * [sShapefileOutput_1_FI begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfexportStruct copyOfexport_tmp = new copyOfexportStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [sEdigeoInput_1_DI begin ] start
				 */

				ok_Hash.put("sEdigeoInput_1_DI", false);
				start_Hash.put("sEdigeoInput_1_DI", System.currentTimeMillis());
				currentComponent = "sEdigeoInput_1_DI";

				int tos_count_sEdigeoInput_1_DI = 0;

				int nbFeature_sEdigeoInput_1_DI = 0;

				/**
				 * [sEdigeoInput_1_DI begin ] stop
				 */

				/**
				 * [sEdigeoInput_1_PG begin ] start
				 */

				ok_Hash.put("sEdigeoInput_1_PG", false);
				start_Hash.put("sEdigeoInput_1_PG", System.currentTimeMillis());
				currentComponent = "sEdigeoInput_1_PG";

				int tos_count_sEdigeoInput_1_PG = 0;

				/* initialize feature count */
				int nbFeature_sEdigeoInput_1_PG = 0;

				org.geotools.data.edigeo.EdigeoDataStore store_sEdigeoInput_1_PG = new org.geotools.data.edigeo.EdigeoDataStore(
						context.edigeoDir + "/" + context.fileName, "TLINE_id");

				String typeName_sEdigeoInput_1_PG = store_sEdigeoInput_1_PG
						.getTypeNames()[0];

				/* get feature source from store */
				org.geotools.data.FeatureSource<org.opengis.feature.simple.SimpleFeatureType, org.opengis.feature.simple.SimpleFeature> source_sEdigeoInput_1_PG = store_sEdigeoInput_1_PG
						.getFeatureSource(typeName_sEdigeoInput_1_PG);

				org.opengis.filter.Filter filter_sEdigeoInput_1_PG = null;

				/* get features from source */
				org.geotools.feature.FeatureCollection<org.opengis.feature.simple.SimpleFeatureType, org.opengis.feature.simple.SimpleFeature> features_sEdigeoInput_1_PG = null;
				if (filter_sEdigeoInput_1_PG == null)
					features_sEdigeoInput_1_PG = source_sEdigeoInput_1_PG
							.getFeatures();
				else
					features_sEdigeoInput_1_PG = source_sEdigeoInput_1_PG
							.getFeatures(filter_sEdigeoInput_1_PG);

				/* get feature type from source */
				org.opengis.feature.simple.SimpleFeatureType featureType_sEdigeoInput_1_PG = source_sEdigeoInput_1_PG
						.getSchema();

				/* initialize source CRS */
				org.opengis.referencing.crs.CoordinateReferenceSystem sourceCRS_sEdigeoInput_1_PG = source_sEdigeoInput_1_PG
						.getSchema().getCoordinateReferenceSystem();

				/* Projection info */
				if (sourceCRS_sEdigeoInput_1_PG != null)
					System.out.println("Source CRS is: "
							+ sourceCRS_sEdigeoInput_1_PG.toWKT());
				else
					System.out.println("No source CRS found nor forced.");

				/* create a map of columns for later use */
				java.util.Map<String, Integer> map_sEdigeoInput_1_PG = new java.util.HashMap<String, Integer>();
				for (int i = 0; i < featureType_sEdigeoInput_1_PG
						.getAttributeCount(); i++) {
					org.opengis.feature.type.AttributeDescriptor attributeType_sEdigeoInput_1_PG = featureType_sEdigeoInput_1_PG
							.getDescriptor(i);
					map_sEdigeoInput_1_PG.put(attributeType_sEdigeoInput_1_PG
							.getName().getLocalPart(), i);
				}

				/* loop over the feature collection and fill up the columns */
				org.geotools.feature.FeatureIterator<org.opengis.feature.simple.SimpleFeature> reader_sEdigeoInput_1_PG = features_sEdigeoInput_1_PG
						.features();
				while (reader_sEdigeoInput_1_PG.hasNext()) {
					org.opengis.feature.simple.SimpleFeature feature_sEdigeoInput_1_PG = reader_sEdigeoInput_1_PG
							.next();
					if (map_sEdigeoInput_1_PG.get("TEX_id") != null) {
						row_sEdigeoInput_1_PG.TEX_id = (String) feature_sEdigeoInput_1_PG
								.getAttribute(map_sEdigeoInput_1_PG
										.get("TEX_id"));
					}
					if (map_sEdigeoInput_1_PG.get("SYM_id") != null) {
						row_sEdigeoInput_1_PG.SYM_id = (String) feature_sEdigeoInput_1_PG
								.getAttribute(map_sEdigeoInput_1_PG
										.get("SYM_id"));
					}
					if (map_sEdigeoInput_1_PG.get("the_geom") != null) {
						org.talend.sdi.geometry.Geometry geometry = new org.talend.sdi.geometry.Geometry(
								(com.vividsolutions.jts.geom.Geometry) feature_sEdigeoInput_1_PG
										.getAttribute(map_sEdigeoInput_1_PG
												.get("the_geom")));

						row_sEdigeoInput_1_PG.the_geom = (Geometry) geometry;

						geometry.setCRS(sourceCRS_sEdigeoInput_1_PG); // Set CRS
																		// in
																		// geom
					}
					nbFeature_sEdigeoInput_1_PG++;

					/**
					 * [sEdigeoInput_1_PG begin ] stop
					 */
					/**
					 * [sEdigeoInput_1_PG main ] start
					 */

					currentComponent = "sEdigeoInput_1_PG";

					tos_count_sEdigeoInput_1_PG++;

					/**
					 * [sEdigeoInput_1_PG main ] stop
					 */

					/**
					 * [sEdigeoInput_1_DI main ] start
					 */

					currentComponent = "sEdigeoInput_1_DI";

					row2.TEX_id = row_sEdigeoInput_1_PG.TEX_id;

					row2.SYM_id = row_sEdigeoInput_1_PG.SYM_id;

					row2.the_geom = row_sEdigeoInput_1_PG.the_geom;

					nbFeature_sEdigeoInput_1_DI++;

					tos_count_sEdigeoInput_1_DI++;

					/**
					 * [sEdigeoInput_1_DI main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables
						// ###############################
						// ###############################
						// # Output tables

						copyOfexport = null;

						// # Output table : 'copyOfexport'
						copyOfexport_tmp.TEX_id = row2.TEX_id;
						copyOfexport_tmp.SYM_id = row2.SYM_id;
						copyOfexport_tmp.the_geom = row2.the_geom;
						copyOfexport = copyOfexport_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "copyOfexport"
					if (copyOfexport != null) {

						/**
						 * [sShapefileOutput_1_FI main ] start
						 */

						currentComponent = "sShapefileOutput_1_FI";

						row_sShapefileOutput_1_FI.TEX_id = copyOfexport.TEX_id;

						row_sShapefileOutput_1_FI.SYM_id = copyOfexport.SYM_id;

						row_sShapefileOutput_1_FI.the_geom = copyOfexport.the_geom;

						nbFeature_sShapefileOutput_1_FI++;

						tos_count_sShapefileOutput_1_FI++;

						/**
						 * [sShapefileOutput_1_FI main ] stop
						 */

						/**
						 * [sShapefileOutput_1_SO main ] start
						 */

						currentComponent = "sShapefileOutput_1_SO";

						org.opengis.feature.simple.SimpleFeature outFeature_sShapefileOutput_1_SO = writer_sShapefileOutput_1_SO
								.next();

						outFeature_sShapefileOutput_1_SO.setAttribute(
								map_sShapefileOutput_1_SO.get("TEX_id"),
								row_sShapefileOutput_1_FI.TEX_id);

						outFeature_sShapefileOutput_1_SO.setAttribute(
								map_sShapefileOutput_1_SO.get("SYM_id"),
								row_sShapefileOutput_1_FI.SYM_id);

						// TODO: don't we want to accept null geometries for
						// PostGIS
						if (row_sShapefileOutput_1_FI.the_geom == null)
							continue;

						if (((org.talend.sdi.geometry.Geometry) row_sShapefileOutput_1_FI.the_geom)
								.isEmpty())
							continue;
						outFeature_sShapefileOutput_1_SO
								.setAttribute(
										map_sShapefileOutput_1_SO
												.get("the_geom"),
										((org.talend.sdi.geometry.Geometry) (row_sShapefileOutput_1_FI.the_geom))
												._getInternalGeometry());
						writer_sShapefileOutput_1_SO.write();
						nbFeature_sShapefileOutput_1_SO++;

						tos_count_sShapefileOutput_1_SO++;

						/**
						 * [sShapefileOutput_1_SO main ] stop
						 */

					} // End of branch "copyOfexport"

					/**
					 * [sEdigeoInput_1_PG end ] start
					 */

					currentComponent = "sEdigeoInput_1_PG";

				}
				reader_sEdigeoInput_1_PG.close();
				store_sEdigeoInput_1_PG.dispose();
				globalMap.put("sEdigeoInput_1_PG_NB_FEATURE",
						nbFeature_sEdigeoInput_1_PG);

				ok_Hash.put("sEdigeoInput_1_PG", true);
				end_Hash.put("sEdigeoInput_1_PG", System.currentTimeMillis());

				/**
				 * [sEdigeoInput_1_PG end ] stop
				 */

				/**
				 * [sEdigeoInput_1_DI end ] start
				 */

				currentComponent = "sEdigeoInput_1_DI";

				globalMap.put("sEdigeoInput_1_DI_NB_FEATURE",
						nbFeature_sEdigeoInput_1_DI);

				ok_Hash.put("sEdigeoInput_1_DI", true);
				end_Hash.put("sEdigeoInput_1_DI", System.currentTimeMillis());

				/**
				 * [sEdigeoInput_1_DI end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [sShapefileOutput_1_FI end ] start
				 */

				currentComponent = "sShapefileOutput_1_FI";

				globalMap.put("sShapefileOutput_1_FI_NB_FEATURE",
						nbFeature_sShapefileOutput_1_FI);

				ok_Hash.put("sShapefileOutput_1_FI", true);
				end_Hash.put("sShapefileOutput_1_FI", System
						.currentTimeMillis());

				/**
				 * [sShapefileOutput_1_FI end ] stop
				 */

				/**
				 * [sShapefileOutput_1_SO end ] start
				 */

				currentComponent = "sShapefileOutput_1_SO";

				globalMap.put("sShapefileOutput_1_METADATA", "");
				writer_sShapefileOutput_1_SO.close();
				store_sShapefileOutput_1_SO.dispose();
				java.io.File file_sShapefileOutput_1_SO = new java.io.File(
						context.exportDir + "/" + context.fileName
								+ "_tline.shp");

				String udigType_sShapefileOutput_1_SO = (file_sShapefileOutput_1_SO
						.getName().lastIndexOf(".") != -1 ? file_sShapefileOutput_1_SO
						.getName().substring(
								0,
								file_sShapefileOutput_1_SO.getName()
										.lastIndexOf("."))
						: file_sShapefileOutput_1_SO.getName());
				// FIXME : handle postgis tables

				String udigResourceId_sShapefileOutput_1_SO = context.exportDir
						+ "/" + context.fileName + "_tline.shp" + "#"
						+ udigType_sShapefileOutput_1_SO;

				globalMap.put("sShapefileOutput_1_NB_FEATURE",
						nbFeature_sShapefileOutput_1_SO);
				globalMap.put("sShapefileOutput_1_UDIG_GEORESOURCEID",
						udigResourceId_sShapefileOutput_1_SO);
				globalMap.put("sShapefileOutput_1_UDIG_GEORESOURCE",
						context.exportDir + "/" + context.fileName
								+ "_tline.shp");

				ok_Hash.put("sShapefileOutput_1_SO", true);
				end_Hash.put("sShapefileOutput_1_SO", System
						.currentTimeMillis());

				tWarn_1Process(globalMap);

				/**
				 * [sShapefileOutput_1_SO end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("sEdigeoInput_1_PG_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	public int portStats = 3334;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();

	public String status = "";

	public static void main(String[] args) {
		final tline_id tline_idClass = new tline_id();

		int exitCode = tline_idClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "");

		try {
			java.io.InputStream inContext = tline_id.class
					.getClassLoader()
					.getResourceAsStream(
							"drebretagne_geobretagne/tline_id_0_1/contexts/Default.properties");
			if (inContext != null) {
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			}

			if (contextStr.compareTo("Default") != 0) {
				inContext = tline_id.class.getClassLoader()
						.getResourceAsStream(
								"drebretagne_geobretagne/tline_id_0_1/contexts/"
										+ contextStr + ".properties");
				if (inContext != null) {
					context.load(inContext);
					inContext.close();
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			context.edigeoDir = (String) context.getProperty("edigeoDir");

			context.exportDir = (String) context.getProperty("exportDir");

			context.fileName = (String) context.getProperty("fileName");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			sEdigeoInput_1_PGProcess(globalMap);
			status = "end";
		} catch (TalendException e_sEdigeoInput_1_PG) {
			status = "failure";
			e_sEdigeoInput_1_PG.printStackTrace();
			globalMap.put("sEdigeoInput_1_PG_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : tline_id");
		}

		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "", "", "");

		if (errorCode == null) {
			return status != null && status.equals("failure") ? 1 : 0;
		} else {
			return errorCode.intValue();
		}
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			portStats = Integer.parseInt(arg.substring(12));
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 49731 characters generated by Spatial Data Integrator Powered by Talend on
 * the January 26, 2010 5:28:53 PM CET
 ************************************************************************************************/
