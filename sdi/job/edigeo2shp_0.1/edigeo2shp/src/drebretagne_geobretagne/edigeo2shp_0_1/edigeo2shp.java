// ============================================================================
//
// Copyright (c) 2005-2009, Talend Inc.
//
// This source code has been automatically generated by Spatial Data Integrator Powered by Talend
// / JobDesigner (CodeGenerator version 2.2.0.200910202312).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package drebretagne_geobretagne.edigeo2shp_0_1;

import routines.DataOperation;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.OpenStreetMap;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
import org.talend.sdi.geometry.Geometry;

/**
 * Job: edigeo2shp Purpose: Translate EDIGeo files to shapefile.<br>
 * Description: Give EDIGeo files directory and export directory in context file
 * and transform EDIGeo files to Shapefile. <br>
 * 
 * @author yjacolin@free.fr
 * @version 2.2.0.200910202312
 * @status DEV
 */
public class edigeo2shp {

	public final Object obj = new Object();
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	private class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (edigeoDir != null) {

				this.setProperty("edigeoDir", edigeoDir.toString());

			}

			if (exportDir != null) {

				this.setProperty("exportDir", exportDir.toString());

			}

			if (force != null) {

				this.setProperty("force", force.toString());

			}

			if (tmpDir != null) {

				this.setProperty("tmpDir", tmpDir.toString());

			}

		}

		public String edigeoDir;
		public String exportDir;
		public Boolean force;
		public String tmpDir;
	}

	private ContextProperties context = new ContextProperties();
	private final String jobVersion = "0.1";
	private final String jobName = "edigeo2shp";
	private final String projectName = "DREBRETAGNE_GEOBRETAGNE";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		errorMessagePS.flush();
		return baos.toString();
	}

	private class TalendException extends Exception {
		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(edigeo2shp.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tFileList_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileList_2", System.currentTimeMillis());
		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_23", System.currentTimeMillis());
		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_1", System.currentTimeMillis());
		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_2", System.currentTimeMillis());
		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_3", System.currentTimeMillis());
		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_4", System.currentTimeMillis());
		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_5", System.currentTimeMillis());
		tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_7", System.currentTimeMillis());
		tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_8", System.currentTimeMillis());
		tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_9", System.currentTimeMillis());
		tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_10", System.currentTimeMillis());
		tRunJob_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_11", System.currentTimeMillis());
		tRunJob_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_12", System.currentTimeMillis());
		tRunJob_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_13", System.currentTimeMillis());
		tRunJob_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_14", System.currentTimeMillis());
		tRunJob_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_15", System.currentTimeMillis());
		tRunJob_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_16", System.currentTimeMillis());
		tRunJob_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_17", System.currentTimeMillis());
		tRunJob_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_18", System.currentTimeMillis());
		tRunJob_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_19", System.currentTimeMillis());
		tRunJob_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_20", System.currentTimeMillis());
		tRunJob_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_21", System.currentTimeMillis());
		tRunJob_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_FILE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_FILE", System.currentTimeMillis());
		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_CONSOLE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());
		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_14_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_15_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_16_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_17_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_18_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_19_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_20_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tRunJob_21_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception));

	}

	public void tFileList_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tFileList_2 begin ] start
				 */

				int NB_ITERATE_tRunJob_23 = 0; // for statistics

				ok_Hash.put("tFileList_2", false);
				start_Hash.put("tFileList_2", System.currentTimeMillis());
				currentComponent = "tFileList_2";

				int tos_count_tFileList_2 = 0;
				// tFileList_Begin

				String directory_tFileList_2 = context.edigeoDir;

				java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();

				maskList_tFileList_2.add("*.THF");

				int NB_FILEtFileList_2 = 0;
				for (String filemask_tFileList_2 : maskList_tFileList_2) {

					filemask_tFileList_2 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_2.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					boolean case_sensitive_tFileList_2 = true;
					java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern
							.compile(filemask_tFileList_2);
					if (!case_sensitive_tFileList_2) {
						fileNamePattern_tFileList_2 = java.util.regex.Pattern
								.compile(
										filemask_tFileList_2,
										java.util.regex.Pattern.CASE_INSENSITIVE);
					}
					java.io.File file_tFileList_2 = new java.io.File(
							directory_tFileList_2);
					final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
					file_tFileList_2.listFiles(new java.io.FilenameFilter() {
						public boolean accept(java.io.File dir, String name) {
							java.io.File file = new java.io.File(dir, name);
							if (!file.isDirectory()) {
								list_tFileList_2.add(file);
							}
							return true;
						}
					});
					// int NB_FILEtFileList_2 = 0;
					java.io.File[] tempArray_tFileList_2 = list_tFileList_2
							.toArray(new java.io.File[list_tFileList_2.size()]);
					java.util.Arrays.sort(tempArray_tFileList_2);

					java.util.List<java.io.File> fileList_tFileList_2 = new java.util.ArrayList<java.io.File>();

					fileList_tFileList_2 = java.util.Arrays
							.asList(tempArray_tFileList_2);

					for (int i_tFileList_2 = 0; i_tFileList_2 < fileList_tFileList_2
							.size(); i_tFileList_2++) {

						java.io.File files_tFileList_2 = fileList_tFileList_2
								.get(i_tFileList_2);
						String fileName_tFileList_2 = files_tFileList_2
								.getName();
						if (!fileNamePattern_tFileList_2.matcher(
								fileName_tFileList_2).matches()) {
							continue;
						}

						String currentFileName_tFileList_2 = files_tFileList_2
								.getName();
						String currentFilePath_tFileList_2 = files_tFileList_2
								.getAbsolutePath();
						NB_FILEtFileList_2++;

						globalMap.put("tFileList_2_CURRENT_FILE",
								currentFileName_tFileList_2);
						globalMap.put("tFileList_2_CURRENT_FILEPATH",
								currentFilePath_tFileList_2);
						globalMap
								.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

						/**
						 * [tFileList_2 begin ] stop
						 */
						/**
						 * [tFileList_2 main ] start
						 */

						currentComponent = "tFileList_2";

						tos_count_tFileList_2++;

						/**
						 * [tFileList_2 main ] stop
						 */
						NB_ITERATE_tRunJob_23++;

						/**
						 * [tRunJob_23 begin ] start
						 */

						ok_Hash.put("tRunJob_23", false);
						start_Hash
								.put("tRunJob_23", System.currentTimeMillis());
						currentComponent = "tRunJob_23";

						int tos_count_tRunJob_23 = 0;

						/**
						 * [tRunJob_23 begin ] stop
						 */
						/**
						 * [tRunJob_23 main ] start
						 */

						currentComponent = "tRunJob_23";

						java.util.List<String> paraList_tRunJob_23 = new java.util.ArrayList<String>();

						paraList_tRunJob_23.add("--father_pid=" + pid);

						paraList_tRunJob_23.add("--root_pid=" + rootPid);

						paraList_tRunJob_23.add("--context=Default");

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_23.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_23 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_23 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_23".equals(tRunJobName_tRunJob_23)
								&& childResumePath_tRunJob_23 != null) {
							paraList_tRunJob_23
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_23.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_23");

						context.synchronizeContext();
						java.util.Enumeration<?> propertyNames_tRunJob_23 = context
								.propertyNames();
						while (propertyNames_tRunJob_23.hasMoreElements()) {
							String key_tRunJob_23 = (String) propertyNames_tRunJob_23
									.nextElement();
							Object value_tRunJob_23 = (Object) context
									.get(key_tRunJob_23);
							paraList_tRunJob_23.add("--context_param "
									+ key_tRunJob_23 + "=" + value_tRunJob_23);
						}
						paraList_tRunJob_23
								.add("--context_param fileName="
										+ RuntimeUtils
												.tRunJobConvertContext(((String) globalMap
														.get("tFileList_2_CURRENT_FILE"))));

						drebretagne_geobretagne.fileexists_0_1.fileExists childJob_tRunJob_23 = new drebretagne_geobretagne.fileexists_0_1.fileExists();

						String[][] childReturn_tRunJob_23 = childJob_tRunJob_23
								.runJob((String[]) paraList_tRunJob_23
										.toArray(new String[paraList_tRunJob_23
												.size()]));

						errorCode = childJob_tRunJob_23.getErrorCode();

						if (childJob_tRunJob_23.getErrorCode() == null) {
							globalMap.put("tRunJob_23_CHILD_RETURN_CODE",
									childJob_tRunJob_23.getStatus() != null
											&& ("failure")
													.equals(childJob_tRunJob_23
															.getStatus()) ? 1
											: 0);
						} else {
							globalMap.put("tRunJob_23_CHILD_RETURN_CODE",
									childJob_tRunJob_23.getErrorCode());
						}

						globalMap.put("tRunJob_23_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_23.getExceptionStackTrace());

						if (childJob_tRunJob_23.getErrorCode() != null
								|| ("failure").equals(childJob_tRunJob_23
										.getStatus())) {
							throw new RuntimeException(
									"Child job running failed");
						}

						tos_count_tRunJob_23++;

						/**
						 * [tRunJob_23 main ] stop
						 */
						/**
						 * [tRunJob_23 end ] start
						 */

						currentComponent = "tRunJob_23";

						ok_Hash.put("tRunJob_23", true);
						end_Hash.put("tRunJob_23", System.currentTimeMillis());

						tRunJob_1Process(globalMap);

						/**
						 * [tRunJob_23 end ] stop
						 */

						/**
						 * [tFileList_2 end ] start
						 */

						currentComponent = "tFileList_2";

					}
				}

				globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

				ok_Hash.put("tFileList_2", true);
				end_Hash.put("tFileList_2", System.currentTimeMillis());

				/**
				 * [tFileList_2 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());
				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */
				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}
				paraList_tRunJob_1.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.batiment_id_0_1.batiment_id childJob_tRunJob_1 = new drebretagne_geobretagne.batiment_id_0_1.batiment_id();

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}

				globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_1.getExceptionStackTrace());

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */
				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				tRunJob_2Process(globalMap);

				/**
				 * [tRunJob_1 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());
				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */
				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context
						.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2
							.nextElement();
					Object value_tRunJob_2 = (Object) context
							.get(key_tRunJob_2);
					paraList_tRunJob_2.add("--context_param " + key_tRunJob_2
							+ "=" + value_tRunJob_2);
				}
				paraList_tRunJob_2.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.borne_id_0_1.borne_id childJob_tRunJob_2 = new drebretagne_geobretagne.borne_id_0_1.borne_id();

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));

				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}

				globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_2.getExceptionStackTrace());

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */
				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				tRunJob_3Process(globalMap);

				/**
				 * [tRunJob_2 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());
				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */
				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_3 = context
						.propertyNames();
				while (propertyNames_tRunJob_3.hasMoreElements()) {
					String key_tRunJob_3 = (String) propertyNames_tRunJob_3
							.nextElement();
					Object value_tRunJob_3 = (Object) context
							.get(key_tRunJob_3);
					paraList_tRunJob_3.add("--context_param " + key_tRunJob_3
							+ "=" + value_tRunJob_3);
				}
				paraList_tRunJob_3.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.charge_id_0_1.charge_id childJob_tRunJob_3 = new drebretagne_geobretagne.charge_id_0_1.charge_id();

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));

				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}

				globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_3.getExceptionStackTrace());

				if (childJob_tRunJob_3.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_3.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */
				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				tRunJob_4Process(globalMap);

				/**
				 * [tRunJob_3 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());
				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				/**
				 * [tRunJob_4 begin ] stop
				 */
				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();

				paraList_tRunJob_4.add("--father_pid=" + pid);

				paraList_tRunJob_4.add("--root_pid=" + rootPid);

				paraList_tRunJob_4.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4)
						&& childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_4");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_4 = context
						.propertyNames();
				while (propertyNames_tRunJob_4.hasMoreElements()) {
					String key_tRunJob_4 = (String) propertyNames_tRunJob_4
							.nextElement();
					Object value_tRunJob_4 = (Object) context
							.get(key_tRunJob_4);
					paraList_tRunJob_4.add("--context_param " + key_tRunJob_4
							+ "=" + value_tRunJob_4);
				}
				paraList_tRunJob_4.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.commune_id_0_1.commune_id childJob_tRunJob_4 = new drebretagne_geobretagne.commune_id_0_1.commune_id();

				String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
						.runJob((String[]) paraList_tRunJob_4
								.toArray(new String[paraList_tRunJob_4.size()]));

				errorCode = childJob_tRunJob_4.getErrorCode();

				if (childJob_tRunJob_4.getErrorCode() == null) {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_4
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getErrorCode());
				}

				globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_4.getExceptionStackTrace());

				if (childJob_tRunJob_4.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_4.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_4++;

				/**
				 * [tRunJob_4 main ] stop
				 */
				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				tRunJob_5Process(globalMap);

				/**
				 * [tRunJob_4 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_5 begin ] start
				 */

				ok_Hash.put("tRunJob_5", false);
				start_Hash.put("tRunJob_5", System.currentTimeMillis());
				currentComponent = "tRunJob_5";

				int tos_count_tRunJob_5 = 0;

				/**
				 * [tRunJob_5 begin ] stop
				 */
				/**
				 * [tRunJob_5 main ] start
				 */

				currentComponent = "tRunJob_5";

				java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();

				paraList_tRunJob_5.add("--father_pid=" + pid);

				paraList_tRunJob_5.add("--root_pid=" + rootPid);

				paraList_tRunJob_5.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_5.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_5 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_5 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_5".equals(tRunJobName_tRunJob_5)
						&& childResumePath_tRunJob_5 != null) {
					paraList_tRunJob_5
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_5");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_5 = context
						.propertyNames();
				while (propertyNames_tRunJob_5.hasMoreElements()) {
					String key_tRunJob_5 = (String) propertyNames_tRunJob_5
							.nextElement();
					Object value_tRunJob_5 = (Object) context
							.get(key_tRunJob_5);
					paraList_tRunJob_5.add("--context_param " + key_tRunJob_5
							+ "=" + value_tRunJob_5);
				}
				paraList_tRunJob_5.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.lieudit_id_0_1.lieudit_id childJob_tRunJob_5 = new drebretagne_geobretagne.lieudit_id_0_1.lieudit_id();

				String[][] childReturn_tRunJob_5 = childJob_tRunJob_5
						.runJob((String[]) paraList_tRunJob_5
								.toArray(new String[paraList_tRunJob_5.size()]));

				errorCode = childJob_tRunJob_5.getErrorCode();

				if (childJob_tRunJob_5.getErrorCode() == null) {
					globalMap.put("tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_5
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getErrorCode());
				}

				globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_5.getExceptionStackTrace());

				tos_count_tRunJob_5++;

				/**
				 * [tRunJob_5 main ] stop
				 */
				/**
				 * [tRunJob_5 end ] start
				 */

				currentComponent = "tRunJob_5";

				ok_Hash.put("tRunJob_5", true);
				end_Hash.put("tRunJob_5", System.currentTimeMillis());

				tRunJob_7Process(globalMap);

				/**
				 * [tRunJob_5 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_7 begin ] start
				 */

				ok_Hash.put("tRunJob_7", false);
				start_Hash.put("tRunJob_7", System.currentTimeMillis());
				currentComponent = "tRunJob_7";

				int tos_count_tRunJob_7 = 0;

				/**
				 * [tRunJob_7 begin ] stop
				 */
				/**
				 * [tRunJob_7 main ] start
				 */

				currentComponent = "tRunJob_7";

				java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();

				paraList_tRunJob_7.add("--father_pid=" + pid);

				paraList_tRunJob_7.add("--root_pid=" + rootPid);

				paraList_tRunJob_7.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_7.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_7 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_7 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_7".equals(tRunJobName_tRunJob_7)
						&& childResumePath_tRunJob_7 != null) {
					paraList_tRunJob_7
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_7");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_7 = context
						.propertyNames();
				while (propertyNames_tRunJob_7.hasMoreElements()) {
					String key_tRunJob_7 = (String) propertyNames_tRunJob_7
							.nextElement();
					Object value_tRunJob_7 = (Object) context
							.get(key_tRunJob_7);
					paraList_tRunJob_7.add("--context_param " + key_tRunJob_7
							+ "=" + value_tRunJob_7);
				}
				paraList_tRunJob_7.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.numvoie_id_0_1.numvoie_id childJob_tRunJob_7 = new drebretagne_geobretagne.numvoie_id_0_1.numvoie_id();

				String[][] childReturn_tRunJob_7 = childJob_tRunJob_7
						.runJob((String[]) paraList_tRunJob_7
								.toArray(new String[paraList_tRunJob_7.size()]));

				errorCode = childJob_tRunJob_7.getErrorCode();

				if (childJob_tRunJob_7.getErrorCode() == null) {
					globalMap.put("tRunJob_7_CHILD_RETURN_CODE",
							childJob_tRunJob_7.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_7
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_7_CHILD_RETURN_CODE",
							childJob_tRunJob_7.getErrorCode());
				}

				globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_7.getExceptionStackTrace());

				if (childJob_tRunJob_7.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_7.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_7++;

				/**
				 * [tRunJob_7 main ] stop
				 */
				/**
				 * [tRunJob_7 end ] start
				 */

				currentComponent = "tRunJob_7";

				ok_Hash.put("tRunJob_7", true);
				end_Hash.put("tRunJob_7", System.currentTimeMillis());

				tRunJob_8Process(globalMap);

				/**
				 * [tRunJob_7 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_8 begin ] start
				 */

				ok_Hash.put("tRunJob_8", false);
				start_Hash.put("tRunJob_8", System.currentTimeMillis());
				currentComponent = "tRunJob_8";

				int tos_count_tRunJob_8 = 0;

				/**
				 * [tRunJob_8 begin ] stop
				 */
				/**
				 * [tRunJob_8 main ] start
				 */

				currentComponent = "tRunJob_8";

				java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();

				paraList_tRunJob_8.add("--father_pid=" + pid);

				paraList_tRunJob_8.add("--root_pid=" + rootPid);

				paraList_tRunJob_8.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_8.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_8 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_8 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_8".equals(tRunJobName_tRunJob_8)
						&& childResumePath_tRunJob_8 != null) {
					paraList_tRunJob_8
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_8");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_8 = context
						.propertyNames();
				while (propertyNames_tRunJob_8.hasMoreElements()) {
					String key_tRunJob_8 = (String) propertyNames_tRunJob_8
							.nextElement();
					Object value_tRunJob_8 = (Object) context
							.get(key_tRunJob_8);
					paraList_tRunJob_8.add("--context_param " + key_tRunJob_8
							+ "=" + value_tRunJob_8);
				}
				paraList_tRunJob_8.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.parcelle_id_0_1.parcelle_id childJob_tRunJob_8 = new drebretagne_geobretagne.parcelle_id_0_1.parcelle_id();

				String[][] childReturn_tRunJob_8 = childJob_tRunJob_8
						.runJob((String[]) paraList_tRunJob_8
								.toArray(new String[paraList_tRunJob_8.size()]));

				errorCode = childJob_tRunJob_8.getErrorCode();

				if (childJob_tRunJob_8.getErrorCode() == null) {
					globalMap.put("tRunJob_8_CHILD_RETURN_CODE",
							childJob_tRunJob_8.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_8
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_8_CHILD_RETURN_CODE",
							childJob_tRunJob_8.getErrorCode());
				}

				globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_8.getExceptionStackTrace());

				if (childJob_tRunJob_8.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_8.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_8++;

				/**
				 * [tRunJob_8 main ] stop
				 */
				/**
				 * [tRunJob_8 end ] start
				 */

				currentComponent = "tRunJob_8";

				ok_Hash.put("tRunJob_8", true);
				end_Hash.put("tRunJob_8", System.currentTimeMillis());

				tRunJob_9Process(globalMap);

				/**
				 * [tRunJob_8 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_9 begin ] start
				 */

				ok_Hash.put("tRunJob_9", false);
				start_Hash.put("tRunJob_9", System.currentTimeMillis());
				currentComponent = "tRunJob_9";

				int tos_count_tRunJob_9 = 0;

				/**
				 * [tRunJob_9 begin ] stop
				 */
				/**
				 * [tRunJob_9 main ] start
				 */

				currentComponent = "tRunJob_9";

				java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();

				paraList_tRunJob_9.add("--father_pid=" + pid);

				paraList_tRunJob_9.add("--root_pid=" + rootPid);

				paraList_tRunJob_9.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_9.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_9 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_9 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_9".equals(tRunJobName_tRunJob_9)
						&& childResumePath_tRunJob_9 != null) {
					paraList_tRunJob_9
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_9");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_9 = context
						.propertyNames();
				while (propertyNames_tRunJob_9.hasMoreElements()) {
					String key_tRunJob_9 = (String) propertyNames_tRunJob_9
							.nextElement();
					Object value_tRunJob_9 = (Object) context
							.get(key_tRunJob_9);
					paraList_tRunJob_9.add("--context_param " + key_tRunJob_9
							+ "=" + value_tRunJob_9);
				}
				paraList_tRunJob_9.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.pointcst_id_0_1.pointcst_id childJob_tRunJob_9 = new drebretagne_geobretagne.pointcst_id_0_1.pointcst_id();

				String[][] childReturn_tRunJob_9 = childJob_tRunJob_9
						.runJob((String[]) paraList_tRunJob_9
								.toArray(new String[paraList_tRunJob_9.size()]));

				errorCode = childJob_tRunJob_9.getErrorCode();

				if (childJob_tRunJob_9.getErrorCode() == null) {
					globalMap.put("tRunJob_9_CHILD_RETURN_CODE",
							childJob_tRunJob_9.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_9
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_9_CHILD_RETURN_CODE",
							childJob_tRunJob_9.getErrorCode());
				}

				globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_9.getExceptionStackTrace());

				if (childJob_tRunJob_9.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_9.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_9++;

				/**
				 * [tRunJob_9 main ] stop
				 */
				/**
				 * [tRunJob_9 end ] start
				 */

				currentComponent = "tRunJob_9";

				ok_Hash.put("tRunJob_9", true);
				end_Hash.put("tRunJob_9", System.currentTimeMillis());

				tRunJob_10Process(globalMap);

				/**
				 * [tRunJob_9 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_10 begin ] start
				 */

				ok_Hash.put("tRunJob_10", false);
				start_Hash.put("tRunJob_10", System.currentTimeMillis());
				currentComponent = "tRunJob_10";

				int tos_count_tRunJob_10 = 0;

				/**
				 * [tRunJob_10 begin ] stop
				 */
				/**
				 * [tRunJob_10 main ] start
				 */

				currentComponent = "tRunJob_10";

				java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();

				paraList_tRunJob_10.add("--father_pid=" + pid);

				paraList_tRunJob_10.add("--root_pid=" + rootPid);

				paraList_tRunJob_10.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_10.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_10 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_10 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_10".equals(tRunJobName_tRunJob_10)
						&& childResumePath_tRunJob_10 != null) {
					paraList_tRunJob_10
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_10");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_10 = context
						.propertyNames();
				while (propertyNames_tRunJob_10.hasMoreElements()) {
					String key_tRunJob_10 = (String) propertyNames_tRunJob_10
							.nextElement();
					Object value_tRunJob_10 = (Object) context
							.get(key_tRunJob_10);
					paraList_tRunJob_10.add("--context_param " + key_tRunJob_10
							+ "=" + value_tRunJob_10);
				}
				paraList_tRunJob_10.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.ptcanv_id_0_1.ptcanv_id childJob_tRunJob_10 = new drebretagne_geobretagne.ptcanv_id_0_1.ptcanv_id();

				String[][] childReturn_tRunJob_10 = childJob_tRunJob_10
						.runJob((String[]) paraList_tRunJob_10
								.toArray(new String[paraList_tRunJob_10.size()]));

				errorCode = childJob_tRunJob_10.getErrorCode();

				if (childJob_tRunJob_10.getErrorCode() == null) {
					globalMap.put("tRunJob_10_CHILD_RETURN_CODE",
							childJob_tRunJob_10.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_10
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_10_CHILD_RETURN_CODE",
							childJob_tRunJob_10.getErrorCode());
				}

				globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_10.getExceptionStackTrace());

				if (childJob_tRunJob_10.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_10.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_10++;

				/**
				 * [tRunJob_10 main ] stop
				 */
				/**
				 * [tRunJob_10 end ] start
				 */

				currentComponent = "tRunJob_10";

				ok_Hash.put("tRunJob_10", true);
				end_Hash.put("tRunJob_10", System.currentTimeMillis());

				tRunJob_11Process(globalMap);

				/**
				 * [tRunJob_10 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_11_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_11 begin ] start
				 */

				ok_Hash.put("tRunJob_11", false);
				start_Hash.put("tRunJob_11", System.currentTimeMillis());
				currentComponent = "tRunJob_11";

				int tos_count_tRunJob_11 = 0;

				/**
				 * [tRunJob_11 begin ] stop
				 */
				/**
				 * [tRunJob_11 main ] start
				 */

				currentComponent = "tRunJob_11";

				java.util.List<String> paraList_tRunJob_11 = new java.util.ArrayList<String>();

				paraList_tRunJob_11.add("--father_pid=" + pid);

				paraList_tRunJob_11.add("--root_pid=" + rootPid);

				paraList_tRunJob_11.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_11.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_11 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_11 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_11".equals(tRunJobName_tRunJob_11)
						&& childResumePath_tRunJob_11 != null) {
					paraList_tRunJob_11
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_11.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_11");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_11 = context
						.propertyNames();
				while (propertyNames_tRunJob_11.hasMoreElements()) {
					String key_tRunJob_11 = (String) propertyNames_tRunJob_11
							.nextElement();
					Object value_tRunJob_11 = (Object) context
							.get(key_tRunJob_11);
					paraList_tRunJob_11.add("--context_param " + key_tRunJob_11
							+ "=" + value_tRunJob_11);
				}
				paraList_tRunJob_11.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.section_id_0_1.section_id childJob_tRunJob_11 = new drebretagne_geobretagne.section_id_0_1.section_id();

				String[][] childReturn_tRunJob_11 = childJob_tRunJob_11
						.runJob((String[]) paraList_tRunJob_11
								.toArray(new String[paraList_tRunJob_11.size()]));

				errorCode = childJob_tRunJob_11.getErrorCode();

				if (childJob_tRunJob_11.getErrorCode() == null) {
					globalMap.put("tRunJob_11_CHILD_RETURN_CODE",
							childJob_tRunJob_11.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_11
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_11_CHILD_RETURN_CODE",
							childJob_tRunJob_11.getErrorCode());
				}

				globalMap.put("tRunJob_11_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_11.getExceptionStackTrace());

				if (childJob_tRunJob_11.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_11.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_11++;

				/**
				 * [tRunJob_11 main ] stop
				 */
				/**
				 * [tRunJob_11 end ] start
				 */

				currentComponent = "tRunJob_11";

				ok_Hash.put("tRunJob_11", true);
				end_Hash.put("tRunJob_11", System.currentTimeMillis());

				tRunJob_12Process(globalMap);

				/**
				 * [tRunJob_11 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_11_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_12 begin ] start
				 */

				ok_Hash.put("tRunJob_12", false);
				start_Hash.put("tRunJob_12", System.currentTimeMillis());
				currentComponent = "tRunJob_12";

				int tos_count_tRunJob_12 = 0;

				/**
				 * [tRunJob_12 begin ] stop
				 */
				/**
				 * [tRunJob_12 main ] start
				 */

				currentComponent = "tRunJob_12";

				java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();

				paraList_tRunJob_12.add("--father_pid=" + pid);

				paraList_tRunJob_12.add("--root_pid=" + rootPid);

				paraList_tRunJob_12.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_12.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_12 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_12 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_12".equals(tRunJobName_tRunJob_12)
						&& childResumePath_tRunJob_12 != null) {
					paraList_tRunJob_12
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_12.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_12");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_12 = context
						.propertyNames();
				while (propertyNames_tRunJob_12.hasMoreElements()) {
					String key_tRunJob_12 = (String) propertyNames_tRunJob_12
							.nextElement();
					Object value_tRunJob_12 = (Object) context
							.get(key_tRunJob_12);
					paraList_tRunJob_12.add("--context_param " + key_tRunJob_12
							+ "=" + value_tRunJob_12);
				}
				paraList_tRunJob_12.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.subdfisc_id_0_1.subdfisc_id childJob_tRunJob_12 = new drebretagne_geobretagne.subdfisc_id_0_1.subdfisc_id();

				String[][] childReturn_tRunJob_12 = childJob_tRunJob_12
						.runJob((String[]) paraList_tRunJob_12
								.toArray(new String[paraList_tRunJob_12.size()]));

				errorCode = childJob_tRunJob_12.getErrorCode();

				if (childJob_tRunJob_12.getErrorCode() == null) {
					globalMap.put("tRunJob_12_CHILD_RETURN_CODE",
							childJob_tRunJob_12.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_12
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_12_CHILD_RETURN_CODE",
							childJob_tRunJob_12.getErrorCode());
				}

				globalMap.put("tRunJob_12_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_12.getExceptionStackTrace());

				if (childJob_tRunJob_12.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_12.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_12++;

				/**
				 * [tRunJob_12 main ] stop
				 */
				/**
				 * [tRunJob_12 end ] start
				 */

				currentComponent = "tRunJob_12";

				ok_Hash.put("tRunJob_12", true);
				end_Hash.put("tRunJob_12", System.currentTimeMillis());

				tRunJob_13Process(globalMap);

				/**
				 * [tRunJob_12 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_13_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_13 begin ] start
				 */

				ok_Hash.put("tRunJob_13", false);
				start_Hash.put("tRunJob_13", System.currentTimeMillis());
				currentComponent = "tRunJob_13";

				int tos_count_tRunJob_13 = 0;

				/**
				 * [tRunJob_13 begin ] stop
				 */
				/**
				 * [tRunJob_13 main ] start
				 */

				currentComponent = "tRunJob_13";

				java.util.List<String> paraList_tRunJob_13 = new java.util.ArrayList<String>();

				paraList_tRunJob_13.add("--father_pid=" + pid);

				paraList_tRunJob_13.add("--root_pid=" + rootPid);

				paraList_tRunJob_13.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_13.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_13 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_13 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_13".equals(tRunJobName_tRunJob_13)
						&& childResumePath_tRunJob_13 != null) {
					paraList_tRunJob_13
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_13.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_13");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_13 = context
						.propertyNames();
				while (propertyNames_tRunJob_13.hasMoreElements()) {
					String key_tRunJob_13 = (String) propertyNames_tRunJob_13
							.nextElement();
					Object value_tRunJob_13 = (Object) context
							.get(key_tRunJob_13);
					paraList_tRunJob_13.add("--context_param " + key_tRunJob_13
							+ "=" + value_tRunJob_13);
				}
				paraList_tRunJob_13.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.subdsect_id_0_1.subdsect_id childJob_tRunJob_13 = new drebretagne_geobretagne.subdsect_id_0_1.subdsect_id();

				String[][] childReturn_tRunJob_13 = childJob_tRunJob_13
						.runJob((String[]) paraList_tRunJob_13
								.toArray(new String[paraList_tRunJob_13.size()]));

				errorCode = childJob_tRunJob_13.getErrorCode();

				if (childJob_tRunJob_13.getErrorCode() == null) {
					globalMap.put("tRunJob_13_CHILD_RETURN_CODE",
							childJob_tRunJob_13.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_13
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_13_CHILD_RETURN_CODE",
							childJob_tRunJob_13.getErrorCode());
				}

				globalMap.put("tRunJob_13_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_13.getExceptionStackTrace());

				if (childJob_tRunJob_13.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_13.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_13++;

				/**
				 * [tRunJob_13 main ] stop
				 */
				/**
				 * [tRunJob_13 end ] start
				 */

				currentComponent = "tRunJob_13";

				ok_Hash.put("tRunJob_13", true);
				end_Hash.put("tRunJob_13", System.currentTimeMillis());

				tRunJob_14Process(globalMap);

				/**
				 * [tRunJob_13 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_13_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_14_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_14 begin ] start
				 */

				ok_Hash.put("tRunJob_14", false);
				start_Hash.put("tRunJob_14", System.currentTimeMillis());
				currentComponent = "tRunJob_14";

				int tos_count_tRunJob_14 = 0;

				/**
				 * [tRunJob_14 begin ] stop
				 */
				/**
				 * [tRunJob_14 main ] start
				 */

				currentComponent = "tRunJob_14";

				java.util.List<String> paraList_tRunJob_14 = new java.util.ArrayList<String>();

				paraList_tRunJob_14.add("--father_pid=" + pid);

				paraList_tRunJob_14.add("--root_pid=" + rootPid);

				paraList_tRunJob_14.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_14.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_14 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_14 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_14".equals(tRunJobName_tRunJob_14)
						&& childResumePath_tRunJob_14 != null) {
					paraList_tRunJob_14
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_14.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_14");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_14 = context
						.propertyNames();
				while (propertyNames_tRunJob_14.hasMoreElements()) {
					String key_tRunJob_14 = (String) propertyNames_tRunJob_14
							.nextElement();
					Object value_tRunJob_14 = (Object) context
							.get(key_tRunJob_14);
					paraList_tRunJob_14.add("--context_param " + key_tRunJob_14
							+ "=" + value_tRunJob_14);
				}
				paraList_tRunJob_14.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.symblim_id_0_1.symblim_id childJob_tRunJob_14 = new drebretagne_geobretagne.symblim_id_0_1.symblim_id();

				String[][] childReturn_tRunJob_14 = childJob_tRunJob_14
						.runJob((String[]) paraList_tRunJob_14
								.toArray(new String[paraList_tRunJob_14.size()]));

				errorCode = childJob_tRunJob_14.getErrorCode();

				if (childJob_tRunJob_14.getErrorCode() == null) {
					globalMap.put("tRunJob_14_CHILD_RETURN_CODE",
							childJob_tRunJob_14.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_14
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_14_CHILD_RETURN_CODE",
							childJob_tRunJob_14.getErrorCode());
				}

				globalMap.put("tRunJob_14_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_14.getExceptionStackTrace());

				if (childJob_tRunJob_14.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_14.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_14++;

				/**
				 * [tRunJob_14 main ] stop
				 */
				/**
				 * [tRunJob_14 end ] start
				 */

				currentComponent = "tRunJob_14";

				ok_Hash.put("tRunJob_14", true);
				end_Hash.put("tRunJob_14", System.currentTimeMillis());

				tRunJob_15Process(globalMap);

				/**
				 * [tRunJob_14 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_14_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_15_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_15 begin ] start
				 */

				ok_Hash.put("tRunJob_15", false);
				start_Hash.put("tRunJob_15", System.currentTimeMillis());
				currentComponent = "tRunJob_15";

				int tos_count_tRunJob_15 = 0;

				/**
				 * [tRunJob_15 begin ] stop
				 */
				/**
				 * [tRunJob_15 main ] start
				 */

				currentComponent = "tRunJob_15";

				java.util.List<String> paraList_tRunJob_15 = new java.util.ArrayList<String>();

				paraList_tRunJob_15.add("--father_pid=" + pid);

				paraList_tRunJob_15.add("--root_pid=" + rootPid);

				paraList_tRunJob_15.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_15.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_15 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_15 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_15".equals(tRunJobName_tRunJob_15)
						&& childResumePath_tRunJob_15 != null) {
					paraList_tRunJob_15
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_15.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_15");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_15 = context
						.propertyNames();
				while (propertyNames_tRunJob_15.hasMoreElements()) {
					String key_tRunJob_15 = (String) propertyNames_tRunJob_15
							.nextElement();
					Object value_tRunJob_15 = (Object) context
							.get(key_tRunJob_15);
					paraList_tRunJob_15.add("--context_param " + key_tRunJob_15
							+ "=" + value_tRunJob_15);
				}
				paraList_tRunJob_15.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.tline_id_0_1.tline_id childJob_tRunJob_15 = new drebretagne_geobretagne.tline_id_0_1.tline_id();

				String[][] childReturn_tRunJob_15 = childJob_tRunJob_15
						.runJob((String[]) paraList_tRunJob_15
								.toArray(new String[paraList_tRunJob_15.size()]));

				errorCode = childJob_tRunJob_15.getErrorCode();

				if (childJob_tRunJob_15.getErrorCode() == null) {
					globalMap.put("tRunJob_15_CHILD_RETURN_CODE",
							childJob_tRunJob_15.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_15
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_15_CHILD_RETURN_CODE",
							childJob_tRunJob_15.getErrorCode());
				}

				globalMap.put("tRunJob_15_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_15.getExceptionStackTrace());

				if (childJob_tRunJob_15.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_15.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_15++;

				/**
				 * [tRunJob_15 main ] stop
				 */
				/**
				 * [tRunJob_15 end ] start
				 */

				currentComponent = "tRunJob_15";

				ok_Hash.put("tRunJob_15", true);
				end_Hash.put("tRunJob_15", System.currentTimeMillis());

				tRunJob_16Process(globalMap);

				/**
				 * [tRunJob_15 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_15_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_16Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_16_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_16 begin ] start
				 */

				ok_Hash.put("tRunJob_16", false);
				start_Hash.put("tRunJob_16", System.currentTimeMillis());
				currentComponent = "tRunJob_16";

				int tos_count_tRunJob_16 = 0;

				/**
				 * [tRunJob_16 begin ] stop
				 */
				/**
				 * [tRunJob_16 main ] start
				 */

				currentComponent = "tRunJob_16";

				java.util.List<String> paraList_tRunJob_16 = new java.util.ArrayList<String>();

				paraList_tRunJob_16.add("--father_pid=" + pid);

				paraList_tRunJob_16.add("--root_pid=" + rootPid);

				paraList_tRunJob_16.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_16.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_16 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_16 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_16".equals(tRunJobName_tRunJob_16)
						&& childResumePath_tRunJob_16 != null) {
					paraList_tRunJob_16
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_16.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_16");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_16 = context
						.propertyNames();
				while (propertyNames_tRunJob_16.hasMoreElements()) {
					String key_tRunJob_16 = (String) propertyNames_tRunJob_16
							.nextElement();
					Object value_tRunJob_16 = (Object) context
							.get(key_tRunJob_16);
					paraList_tRunJob_16.add("--context_param " + key_tRunJob_16
							+ "=" + value_tRunJob_16);
				}
				paraList_tRunJob_16.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.tpoint_id_0_1.tpoint_id childJob_tRunJob_16 = new drebretagne_geobretagne.tpoint_id_0_1.tpoint_id();

				String[][] childReturn_tRunJob_16 = childJob_tRunJob_16
						.runJob((String[]) paraList_tRunJob_16
								.toArray(new String[paraList_tRunJob_16.size()]));

				errorCode = childJob_tRunJob_16.getErrorCode();

				if (childJob_tRunJob_16.getErrorCode() == null) {
					globalMap.put("tRunJob_16_CHILD_RETURN_CODE",
							childJob_tRunJob_16.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_16
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_16_CHILD_RETURN_CODE",
							childJob_tRunJob_16.getErrorCode());
				}

				globalMap.put("tRunJob_16_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_16.getExceptionStackTrace());

				if (childJob_tRunJob_16.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_16.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_16++;

				/**
				 * [tRunJob_16 main ] stop
				 */
				/**
				 * [tRunJob_16 end ] start
				 */

				currentComponent = "tRunJob_16";

				ok_Hash.put("tRunJob_16", true);
				end_Hash.put("tRunJob_16", System.currentTimeMillis());

				tRunJob_17Process(globalMap);

				/**
				 * [tRunJob_16 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_16_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_17Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_17_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_17 begin ] start
				 */

				ok_Hash.put("tRunJob_17", false);
				start_Hash.put("tRunJob_17", System.currentTimeMillis());
				currentComponent = "tRunJob_17";

				int tos_count_tRunJob_17 = 0;

				/**
				 * [tRunJob_17 begin ] stop
				 */
				/**
				 * [tRunJob_17 main ] start
				 */

				currentComponent = "tRunJob_17";

				java.util.List<String> paraList_tRunJob_17 = new java.util.ArrayList<String>();

				paraList_tRunJob_17.add("--father_pid=" + pid);

				paraList_tRunJob_17.add("--root_pid=" + rootPid);

				paraList_tRunJob_17.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_17.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_17 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_17 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_17".equals(tRunJobName_tRunJob_17)
						&& childResumePath_tRunJob_17 != null) {
					paraList_tRunJob_17
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_17.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_17");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_17 = context
						.propertyNames();
				while (propertyNames_tRunJob_17.hasMoreElements()) {
					String key_tRunJob_17 = (String) propertyNames_tRunJob_17
							.nextElement();
					Object value_tRunJob_17 = (Object) context
							.get(key_tRunJob_17);
					paraList_tRunJob_17.add("--context_param " + key_tRunJob_17
							+ "=" + value_tRunJob_17);
				}
				paraList_tRunJob_17.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.tronfluv_id_0_1.tronfluv_id childJob_tRunJob_17 = new drebretagne_geobretagne.tronfluv_id_0_1.tronfluv_id();

				String[][] childReturn_tRunJob_17 = childJob_tRunJob_17
						.runJob((String[]) paraList_tRunJob_17
								.toArray(new String[paraList_tRunJob_17.size()]));

				errorCode = childJob_tRunJob_17.getErrorCode();

				if (childJob_tRunJob_17.getErrorCode() == null) {
					globalMap.put("tRunJob_17_CHILD_RETURN_CODE",
							childJob_tRunJob_17.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_17
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_17_CHILD_RETURN_CODE",
							childJob_tRunJob_17.getErrorCode());
				}

				globalMap.put("tRunJob_17_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_17.getExceptionStackTrace());

				if (childJob_tRunJob_17.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_17.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_17++;

				/**
				 * [tRunJob_17 main ] stop
				 */
				/**
				 * [tRunJob_17 end ] start
				 */

				currentComponent = "tRunJob_17";

				ok_Hash.put("tRunJob_17", true);
				end_Hash.put("tRunJob_17", System.currentTimeMillis());

				tRunJob_18Process(globalMap);

				/**
				 * [tRunJob_17 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_17_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_18Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_18_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_18 begin ] start
				 */

				ok_Hash.put("tRunJob_18", false);
				start_Hash.put("tRunJob_18", System.currentTimeMillis());
				currentComponent = "tRunJob_18";

				int tos_count_tRunJob_18 = 0;

				/**
				 * [tRunJob_18 begin ] stop
				 */
				/**
				 * [tRunJob_18 main ] start
				 */

				currentComponent = "tRunJob_18";

				java.util.List<String> paraList_tRunJob_18 = new java.util.ArrayList<String>();

				paraList_tRunJob_18.add("--father_pid=" + pid);

				paraList_tRunJob_18.add("--root_pid=" + rootPid);

				paraList_tRunJob_18.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_18.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_18 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_18 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_18".equals(tRunJobName_tRunJob_18)
						&& childResumePath_tRunJob_18 != null) {
					paraList_tRunJob_18
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_18.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_18");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_18 = context
						.propertyNames();
				while (propertyNames_tRunJob_18.hasMoreElements()) {
					String key_tRunJob_18 = (String) propertyNames_tRunJob_18
							.nextElement();
					Object value_tRunJob_18 = (Object) context
							.get(key_tRunJob_18);
					paraList_tRunJob_18.add("--context_param " + key_tRunJob_18
							+ "=" + value_tRunJob_18);
				}
				paraList_tRunJob_18.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.tronroute_id_0_1.tronroute_id childJob_tRunJob_18 = new drebretagne_geobretagne.tronroute_id_0_1.tronroute_id();

				String[][] childReturn_tRunJob_18 = childJob_tRunJob_18
						.runJob((String[]) paraList_tRunJob_18
								.toArray(new String[paraList_tRunJob_18.size()]));

				errorCode = childJob_tRunJob_18.getErrorCode();

				if (childJob_tRunJob_18.getErrorCode() == null) {
					globalMap.put("tRunJob_18_CHILD_RETURN_CODE",
							childJob_tRunJob_18.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_18
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_18_CHILD_RETURN_CODE",
							childJob_tRunJob_18.getErrorCode());
				}

				globalMap.put("tRunJob_18_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_18.getExceptionStackTrace());

				if (childJob_tRunJob_18.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_18.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_18++;

				/**
				 * [tRunJob_18 main ] stop
				 */
				/**
				 * [tRunJob_18 end ] start
				 */

				currentComponent = "tRunJob_18";

				ok_Hash.put("tRunJob_18", true);
				end_Hash.put("tRunJob_18", System.currentTimeMillis());

				tRunJob_19Process(globalMap);

				/**
				 * [tRunJob_18 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_18_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_19Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_19_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_19 begin ] start
				 */

				ok_Hash.put("tRunJob_19", false);
				start_Hash.put("tRunJob_19", System.currentTimeMillis());
				currentComponent = "tRunJob_19";

				int tos_count_tRunJob_19 = 0;

				/**
				 * [tRunJob_19 begin ] stop
				 */
				/**
				 * [tRunJob_19 main ] start
				 */

				currentComponent = "tRunJob_19";

				java.util.List<String> paraList_tRunJob_19 = new java.util.ArrayList<String>();

				paraList_tRunJob_19.add("--father_pid=" + pid);

				paraList_tRunJob_19.add("--root_pid=" + rootPid);

				paraList_tRunJob_19.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_19.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_19 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_19 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_19".equals(tRunJobName_tRunJob_19)
						&& childResumePath_tRunJob_19 != null) {
					paraList_tRunJob_19
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_19.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_19");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_19 = context
						.propertyNames();
				while (propertyNames_tRunJob_19.hasMoreElements()) {
					String key_tRunJob_19 = (String) propertyNames_tRunJob_19
							.nextElement();
					Object value_tRunJob_19 = (Object) context
							.get(key_tRunJob_19);
					paraList_tRunJob_19.add("--context_param " + key_tRunJob_19
							+ "=" + value_tRunJob_19);
				}
				paraList_tRunJob_19.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.tsurf_id_0_1.tsurf_id childJob_tRunJob_19 = new drebretagne_geobretagne.tsurf_id_0_1.tsurf_id();

				String[][] childReturn_tRunJob_19 = childJob_tRunJob_19
						.runJob((String[]) paraList_tRunJob_19
								.toArray(new String[paraList_tRunJob_19.size()]));

				errorCode = childJob_tRunJob_19.getErrorCode();

				if (childJob_tRunJob_19.getErrorCode() == null) {
					globalMap.put("tRunJob_19_CHILD_RETURN_CODE",
							childJob_tRunJob_19.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_19
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_19_CHILD_RETURN_CODE",
							childJob_tRunJob_19.getErrorCode());
				}

				globalMap.put("tRunJob_19_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_19.getExceptionStackTrace());

				if (childJob_tRunJob_19.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_19.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_19++;

				/**
				 * [tRunJob_19 main ] stop
				 */
				/**
				 * [tRunJob_19 end ] start
				 */

				currentComponent = "tRunJob_19";

				ok_Hash.put("tRunJob_19", true);
				end_Hash.put("tRunJob_19", System.currentTimeMillis());

				tRunJob_20Process(globalMap);

				/**
				 * [tRunJob_19 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_19_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_20Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_20_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_20 begin ] start
				 */

				ok_Hash.put("tRunJob_20", false);
				start_Hash.put("tRunJob_20", System.currentTimeMillis());
				currentComponent = "tRunJob_20";

				int tos_count_tRunJob_20 = 0;

				/**
				 * [tRunJob_20 begin ] stop
				 */
				/**
				 * [tRunJob_20 main ] start
				 */

				currentComponent = "tRunJob_20";

				java.util.List<String> paraList_tRunJob_20 = new java.util.ArrayList<String>();

				paraList_tRunJob_20.add("--father_pid=" + pid);

				paraList_tRunJob_20.add("--root_pid=" + rootPid);

				paraList_tRunJob_20.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_20.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_20 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_20 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_20".equals(tRunJobName_tRunJob_20)
						&& childResumePath_tRunJob_20 != null) {
					paraList_tRunJob_20
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_20.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_20");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_20 = context
						.propertyNames();
				while (propertyNames_tRunJob_20.hasMoreElements()) {
					String key_tRunJob_20 = (String) propertyNames_tRunJob_20
							.nextElement();
					Object value_tRunJob_20 = (Object) context
							.get(key_tRunJob_20);
					paraList_tRunJob_20.add("--context_param " + key_tRunJob_20
							+ "=" + value_tRunJob_20);
				}
				paraList_tRunJob_20.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.voiep_id_0_1.voiep_id childJob_tRunJob_20 = new drebretagne_geobretagne.voiep_id_0_1.voiep_id();

				String[][] childReturn_tRunJob_20 = childJob_tRunJob_20
						.runJob((String[]) paraList_tRunJob_20
								.toArray(new String[paraList_tRunJob_20.size()]));

				errorCode = childJob_tRunJob_20.getErrorCode();

				if (childJob_tRunJob_20.getErrorCode() == null) {
					globalMap.put("tRunJob_20_CHILD_RETURN_CODE",
							childJob_tRunJob_20.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_20
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_20_CHILD_RETURN_CODE",
							childJob_tRunJob_20.getErrorCode());
				}

				globalMap.put("tRunJob_20_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_20.getExceptionStackTrace());

				if (childJob_tRunJob_20.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_20.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_20++;

				/**
				 * [tRunJob_20 main ] stop
				 */
				/**
				 * [tRunJob_20 end ] start
				 */

				currentComponent = "tRunJob_20";

				ok_Hash.put("tRunJob_20", true);
				end_Hash.put("tRunJob_20", System.currentTimeMillis());

				tRunJob_21Process(globalMap);

				/**
				 * [tRunJob_20 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_20_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_21Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_21_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				/**
				 * [tRunJob_21 begin ] start
				 */

				ok_Hash.put("tRunJob_21", false);
				start_Hash.put("tRunJob_21", System.currentTimeMillis());
				currentComponent = "tRunJob_21";

				int tos_count_tRunJob_21 = 0;

				/**
				 * [tRunJob_21 begin ] stop
				 */
				/**
				 * [tRunJob_21 main ] start
				 */

				currentComponent = "tRunJob_21";

				java.util.List<String> paraList_tRunJob_21 = new java.util.ArrayList<String>();

				paraList_tRunJob_21.add("--father_pid=" + pid);

				paraList_tRunJob_21.add("--root_pid=" + rootPid);

				paraList_tRunJob_21.add("--context=Default");

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_21.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_21 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_21 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_21".equals(tRunJobName_tRunJob_21)
						&& childResumePath_tRunJob_21 != null) {
					paraList_tRunJob_21
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_21.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_21");

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_21 = context
						.propertyNames();
				while (propertyNames_tRunJob_21.hasMoreElements()) {
					String key_tRunJob_21 = (String) propertyNames_tRunJob_21
							.nextElement();
					Object value_tRunJob_21 = (Object) context
							.get(key_tRunJob_21);
					paraList_tRunJob_21.add("--context_param " + key_tRunJob_21
							+ "=" + value_tRunJob_21);
				}
				paraList_tRunJob_21.add("--context_param fileName="
						+ RuntimeUtils
								.tRunJobConvertContext(((String) globalMap
										.get("tFileList_2_CURRENT_FILE"))));

				drebretagne_geobretagne.zoncommuni_id_0_1.zoncommuni_id childJob_tRunJob_21 = new drebretagne_geobretagne.zoncommuni_id_0_1.zoncommuni_id();

				String[][] childReturn_tRunJob_21 = childJob_tRunJob_21
						.runJob((String[]) paraList_tRunJob_21
								.toArray(new String[paraList_tRunJob_21.size()]));

				errorCode = childJob_tRunJob_21.getErrorCode();

				if (childJob_tRunJob_21.getErrorCode() == null) {
					globalMap.put("tRunJob_21_CHILD_RETURN_CODE",
							childJob_tRunJob_21.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_21
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_21_CHILD_RETURN_CODE",
							childJob_tRunJob_21.getErrorCode());
				}

				globalMap.put("tRunJob_21_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_21.getExceptionStackTrace());

				if (childJob_tRunJob_21.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_21.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_21++;

				/**
				 * [tRunJob_21 main ] stop
				 */
				/**
				 * [tRunJob_21 end ] start
				 */

				currentComponent = "tRunJob_21";

				ok_Hash.put("tRunJob_21", true);
				end_Hash.put("tRunJob_21", System.currentTimeMillis());

				/**
				 * [tRunJob_21 end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("tRunJob_21_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_FILEStruct implements
			routines.system.IPersistableRow<row_talendLogs_FILEStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.moment = null;
					} else {
						this.moment = new Date(dis.readLong());
					}

					length = dis.readInt();
					if (length == -1) {
						this.pid = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.pid = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.root_pid = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.root_pid = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.father_pid = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.father_pid = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.project = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.project = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.job = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.job = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.context = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.context = new String(commonByteArray, 0, length);
					}

					length = dis.readByte();
					if (length == -1) {
						this.priority = null;
					} else {
						this.priority = dis.readInt();
					}

					length = dis.readInt();
					if (length == -1) {
						this.type = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.type = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.origin = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.origin = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.message = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.message = new String(commonByteArray, 0, length);
					}

					length = dis.readByte();
					if (length == -1) {
						this.code = null;
					} else {
						this.code = dis.readInt();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				if (this.moment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.moment.getTime());
				}

				// String

				if (this.pid == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.pid.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.root_pid == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.root_pid.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.father_pid == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.father_pid.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.project == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.project.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.job == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.job.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.context == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.context.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// Integer

				if (this.priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeInt(this.priority);
				}

				// String

				if (this.type == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.type.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.origin == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.origin.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.message == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.message.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// Integer

				if (this.code == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeInt(this.code);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");

			sb.append("moment");
			sb.append("=");
			sb.append(String.valueOf(this.moment));

			sb.append(", ");

			sb.append("pid");
			sb.append("=");
			sb.append(String.valueOf(this.pid));

			sb.append(", ");

			sb.append("root_pid");
			sb.append("=");
			sb.append(String.valueOf(this.root_pid));

			sb.append(", ");

			sb.append("father_pid");
			sb.append("=");
			sb.append(String.valueOf(this.father_pid));

			sb.append(", ");

			sb.append("project");
			sb.append("=");
			sb.append(String.valueOf(this.project));

			sb.append(", ");

			sb.append("job");
			sb.append("=");
			sb.append(String.valueOf(this.job));

			sb.append(", ");

			sb.append("context");
			sb.append("=");
			sb.append(String.valueOf(this.context));

			sb.append(", ");

			sb.append("priority");
			sb.append("=");
			sb.append(String.valueOf(this.priority));

			sb.append(", ");

			sb.append("type");
			sb.append("=");
			sb.append(String.valueOf(this.type));

			sb.append(", ");

			sb.append("origin");
			sb.append("=");
			sb.append(String.valueOf(this.origin));

			sb.append(", ");

			sb.append("message");
			sb.append("=");
			sb.append(String.valueOf(this.message));

			sb.append(", ");

			sb.append("code");
			sb.append("=");
			sb.append(String.valueOf(this.code));

			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_FILEStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.moment = null;
					} else {
						this.moment = new Date(dis.readLong());
					}

					length = dis.readInt();
					if (length == -1) {
						this.pid = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.pid = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.root_pid = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.root_pid = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.father_pid = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.father_pid = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.project = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.project = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.job = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.job = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.context = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.context = new String(commonByteArray, 0, length);
					}

					length = dis.readByte();
					if (length == -1) {
						this.priority = null;
					} else {
						this.priority = dis.readInt();
					}

					length = dis.readInt();
					if (length == -1) {
						this.type = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.type = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.origin = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.origin = new String(commonByteArray, 0, length);
					}

					length = dis.readInt();
					if (length == -1) {
						this.message = null;
					} else {
						if (length > commonByteArray.length) {
							if (length < 1024 && commonByteArray.length == 0) {
								commonByteArray = new byte[1024];
							} else {
								commonByteArray = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray, 0, length);
						this.message = new String(commonByteArray, 0, length);
					}

					length = dis.readByte();
					if (length == -1) {
						this.code = null;
					} else {
						this.code = dis.readInt();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				if (this.moment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.moment.getTime());
				}

				// String

				if (this.pid == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.pid.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.root_pid == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.root_pid.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.father_pid == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.father_pid.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.project == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.project.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.job == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.job.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.context == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.context.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// Integer

				if (this.priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeInt(this.priority);
				}

				// String

				if (this.type == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.type.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.origin == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.origin.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.message == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.message.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// Integer

				if (this.code == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeInt(this.code);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");

			sb.append("moment");
			sb.append("=");
			sb.append(String.valueOf(this.moment));

			sb.append(", ");

			sb.append("pid");
			sb.append("=");
			sb.append(String.valueOf(this.pid));

			sb.append(", ");

			sb.append("root_pid");
			sb.append("=");
			sb.append(String.valueOf(this.root_pid));

			sb.append(", ");

			sb.append("father_pid");
			sb.append("=");
			sb.append(String.valueOf(this.father_pid));

			sb.append(", ");

			sb.append("project");
			sb.append("=");
			sb.append(String.valueOf(this.project));

			sb.append(", ");

			sb.append("job");
			sb.append("=");
			sb.append(String.valueOf(this.job));

			sb.append(", ");

			sb.append("context");
			sb.append("=");
			sb.append(String.valueOf(this.context));

			sb.append(", ");

			sb.append("priority");
			sb.append("=");
			sb.append(String.valueOf(this.priority));

			sb.append(", ");

			sb.append("type");
			sb.append("=");
			sb.append(String.valueOf(this.type));

			sb.append(", ");

			sb.append("origin");
			sb.append("=");
			sb.append(String.valueOf(this.origin));

			sb.append(", ");

			sb.append("message");
			sb.append("=");
			sb.append(String.valueOf(this.message));

			sb.append(", ");

			sb.append("code");
			sb.append("=");
			sb.append(String.valueOf(this.code));

			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();
				row_talendLogs_LOGSStruct row_talendLogs_FILE = row_talendLogs_LOGS;

				/**
				 * [talendLogs_CONSOLE begin ] start
				 */

				ok_Hash.put("talendLogs_CONSOLE", false);
				start_Hash
						.put("talendLogs_CONSOLE", System.currentTimeMillis());
				currentComponent = "talendLogs_CONSOLE";

				int tos_count_talendLogs_CONSOLE = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
				java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;

				int nb_line_talendLogs_CONSOLE = 0;

				// /////////////////////

				/**
				 * [talendLogs_CONSOLE begin ] stop
				 */

				/**
				 * [talendLogs_FILE begin ] start
				 */

				ok_Hash.put("talendLogs_FILE", false);
				start_Hash.put("talendLogs_FILE", System.currentTimeMillis());
				currentComponent = "talendLogs_FILE";

				int tos_count_talendLogs_FILE = 0;

				String fileName_talendLogs_FILE = (new java.io.File(
						context.tmpDir + "/" + "edigeo2shp.log"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_talendLogs_FILE = null;
				String extension_talendLogs_FILE = null;
				String directory_talendLogs_FILE = null;
				if ((fileName_talendLogs_FILE.indexOf("/") != -1)) {
					if (fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE
							.lastIndexOf("/")) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					}
					directory_talendLogs_FILE = fileName_talendLogs_FILE
							.substring(0, fileName_talendLogs_FILE
									.lastIndexOf("/"));
				} else {
					if (fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					}
					directory_talendLogs_FILE = "";
				}

				int nb_line_talendLogs_FILE = 0;
				int splitEvery_talendLogs_FILE = 1000;
				int splitedFileNo_talendLogs_FILE = 0;
				int currentRow_talendLogs_FILE = 0;

				final String OUT_DELIM_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendLogs_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendLogs_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendLogs_FILE != null
						&& directory_talendLogs_FILE.trim().length() != 0) {
					java.io.File dir_talendLogs_FILE = new java.io.File(
							directory_talendLogs_FILE);
					if (!dir_talendLogs_FILE.exists()) {
						dir_talendLogs_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendLogs_FILE = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_talendLogs_FILE, true),
								"ISO-8859-15"));
				java.io.File filetalendLogs_FILE = new java.io.File(
						fileName_talendLogs_FILE);

				row_talendLogs_FILE.moment = row_talendLogs_LOGS.moment;
				row_talendLogs_FILE.pid = row_talendLogs_LOGS.pid;
				row_talendLogs_FILE.root_pid = row_talendLogs_LOGS.root_pid;
				row_talendLogs_FILE.father_pid = row_talendLogs_LOGS.father_pid;
				row_talendLogs_FILE.project = row_talendLogs_LOGS.project;
				row_talendLogs_FILE.job = row_talendLogs_LOGS.job;
				row_talendLogs_FILE.context = row_talendLogs_LOGS.context;
				row_talendLogs_FILE.priority = row_talendLogs_LOGS.priority;
				row_talendLogs_FILE.type = row_talendLogs_LOGS.type;
				row_talendLogs_FILE.origin = row_talendLogs_LOGS.origin;
				row_talendLogs_FILE.message = row_talendLogs_LOGS.message;
				row_talendLogs_FILE.code = row_talendLogs_LOGS.code;

				/**
				 * [talendLogs_FILE begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
						.getMessages()) {
					row_talendLogs_LOGS.type = lcm.getType();
					row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row_talendLogs_LOGS.priority = lcm.getPriority();
					row_talendLogs_LOGS.message = lcm.getMessage();
					row_talendLogs_LOGS.code = lcm.getCode();

					row_talendLogs_LOGS.moment = java.util.Calendar
							.getInstance().getTime();

					row_talendLogs_LOGS.pid = pid;
					row_talendLogs_LOGS.root_pid = rootPid;
					row_talendLogs_LOGS.father_pid = fatherPid;

					row_talendLogs_LOGS.project = projectName;
					row_talendLogs_LOGS.job = jobName;
					row_talendLogs_LOGS.context = contextStr;

					/**
					 * [talendLogs_LOGS begin ] stop
					 */
					/**
					 * [talendLogs_LOGS main ] start
					 */

					currentComponent = "talendLogs_LOGS";

					tos_count_talendLogs_LOGS++;

					/**
					 * [talendLogs_LOGS main ] stop
					 */

					/**
					 * [talendLogs_FILE main ] start
					 */

					currentComponent = "talendLogs_FILE";

					StringBuilder sb_talendLogs_FILE = new StringBuilder();

					if (row_talendLogs_LOGS.moment != null) {

						sb_talendLogs_FILE.append(

						FormatterUtils.format_Date(row_talendLogs_LOGS.moment,
								"yyyy-MM-dd HH:mm:ss")

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.pid != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.pid

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.root_pid != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.root_pid

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.father_pid != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.father_pid

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.project != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.project

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.job != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.job

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.context != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.context

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.priority != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.priority

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.type != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.type

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.origin != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.origin

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.message != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.message

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

					if (row_talendLogs_LOGS.code != null) {

						sb_talendLogs_FILE.append(

						row_talendLogs_LOGS.code

						);

					}

					sb_talendLogs_FILE.append(OUT_DELIM_ROWSEP_talendLogs_FILE);

					outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());

					nb_line_talendLogs_FILE++;

					row_talendLogs_FILE.moment = row_talendLogs_LOGS.moment;
					row_talendLogs_FILE.pid = row_talendLogs_LOGS.pid;
					row_talendLogs_FILE.root_pid = row_talendLogs_LOGS.root_pid;
					row_talendLogs_FILE.father_pid = row_talendLogs_LOGS.father_pid;
					row_talendLogs_FILE.project = row_talendLogs_LOGS.project;
					row_talendLogs_FILE.job = row_talendLogs_LOGS.job;
					row_talendLogs_FILE.context = row_talendLogs_LOGS.context;
					row_talendLogs_FILE.priority = row_talendLogs_LOGS.priority;
					row_talendLogs_FILE.type = row_talendLogs_LOGS.type;
					row_talendLogs_FILE.origin = row_talendLogs_LOGS.origin;
					row_talendLogs_FILE.message = row_talendLogs_LOGS.message;
					row_talendLogs_FILE.code = row_talendLogs_LOGS.code;

					tos_count_talendLogs_FILE++;

					/**
					 * [talendLogs_FILE main ] stop
					 */

					/**
					 * [talendLogs_CONSOLE main ] start
					 */

					currentComponent = "talendLogs_CONSOLE";

					// /////////////////////

					StringBuilder strBuffer_talendLogs_CONSOLE = new StringBuilder();

					if (row_talendLogs_FILE.moment != null) { //              

						strBuffer_talendLogs_CONSOLE.append(FormatterUtils
								.format_Date(row_talendLogs_FILE.moment,
										"yyyy-MM-dd HH:mm:ss"));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.pid != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.pid));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.root_pid != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.root_pid));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.father_pid != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.father_pid));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.project != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.project));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.job != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.job));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.context != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.context));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.priority != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.priority));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.type != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.type));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.origin != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.origin));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.message != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.message));

					} //  			

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_FILE.code != null) { //              

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_FILE.code));

					} //  			

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE",
								consoleOut_talendLogs_CONSOLE);
					}

					consoleOut_talendLogs_CONSOLE
							.println(strBuffer_talendLogs_CONSOLE.toString());
					consoleOut_talendLogs_CONSOLE.flush();
					nb_line_talendLogs_CONSOLE++;
					// ////

					// ////

					// /////////////////////

					tos_count_talendLogs_CONSOLE++;

					/**
					 * [talendLogs_CONSOLE main ] stop
					 */

					/**
					 * [talendLogs_LOGS end ] start
					 */

					currentComponent = "talendLogs_LOGS";

				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_FILE end ] start
				 */

				currentComponent = "talendLogs_FILE";

				outtalendLogs_FILE.close();
				globalMap.put("talendLogs_FILE_NB_LINE",
						nb_line_talendLogs_FILE);

				row_talendLogs_FILE.moment = row_talendLogs_LOGS.moment;
				row_talendLogs_FILE.pid = row_talendLogs_LOGS.pid;
				row_talendLogs_FILE.root_pid = row_talendLogs_LOGS.root_pid;
				row_talendLogs_FILE.father_pid = row_talendLogs_LOGS.father_pid;
				row_talendLogs_FILE.project = row_talendLogs_LOGS.project;
				row_talendLogs_FILE.job = row_talendLogs_LOGS.job;
				row_talendLogs_FILE.context = row_talendLogs_LOGS.context;
				row_talendLogs_FILE.priority = row_talendLogs_LOGS.priority;
				row_talendLogs_FILE.type = row_talendLogs_LOGS.type;
				row_talendLogs_FILE.origin = row_talendLogs_LOGS.origin;
				row_talendLogs_FILE.message = row_talendLogs_LOGS.message;
				row_talendLogs_FILE.code = row_talendLogs_LOGS.code;

				ok_Hash.put("talendLogs_FILE", true);
				end_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				/**
				 * [talendLogs_FILE end ] stop
				 */

				/**
				 * [talendLogs_CONSOLE end ] start
				 */

				currentComponent = "talendLogs_CONSOLE";

				// ////
				// ////
				globalMap.put("talendLogs_CONSOLE_NB_LINE",
						nb_line_talendLogs_CONSOLE);

				// /////////////////////

				ok_Hash.put("talendLogs_CONSOLE", true);
				end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

				/**
				 * [talendLogs_CONSOLE end ] stop
				 */

				globalResumeTicket = true;

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	public int portStats = 3334;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();

	public String status = "";

	public static void main(String[] args) {
		final edigeo2shp edigeo2shpClass = new edigeo2shp();

		int exitCode = edigeo2shpClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "");

		try {
			java.io.InputStream inContext = edigeo2shp.class
					.getClassLoader()
					.getResourceAsStream(
							"drebretagne_geobretagne/edigeo2shp_0_1/contexts/Default.properties");
			if (inContext != null) {
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			}

			if (contextStr.compareTo("Default") != 0) {
				inContext = edigeo2shp.class.getClassLoader()
						.getResourceAsStream(
								"drebretagne_geobretagne/edigeo2shp_0_1/contexts/"
										+ contextStr + ".properties");
				if (inContext != null) {
					context.load(inContext);
					inContext.close();
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			context.edigeoDir = (String) context.getProperty("edigeoDir");

			context.exportDir = (String) context.getProperty("exportDir");

			try {
				context.force = Boolean.parseBoolean(context
						.getProperty("force"));
			} catch (NumberFormatException e) {
				context.force = null;
			}

			context.tmpDir = (String) context.getProperty("tmpDir");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileList_2Process(globalMap);
			status = "end";
		} catch (TalendException e_tFileList_2) {
			status = "failure";
			e_tFileList_2.printStackTrace();
			globalMap.put("tFileList_2_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : edigeo2shp");
		}

		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "", "", "");

		if (errorCode == null) {
			return status != null && status.equals("failure") ? 1 : 0;
		} else {
			return errorCode.intValue();
		}
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			portStats = Integer.parseInt(arg.substring(12));
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 152547 characters generated by Spatial Data Integrator Powered by Talend on
 * the January 26, 2010 5:28:56 PM CET
 ************************************************************************************************/
